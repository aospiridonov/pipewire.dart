// ignore_for_file: camel_case_types, non_constant_identifier_names, constant_identifier_names, no_leading_underscores_for_local_identifiers, library_private_types_in_public_api
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to Pipewire
class Pipewire {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Pipewire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Pipewire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<pw_properties> pw_properties_new(
    ffi.Pointer<ffi.Char> key,
  ) {
    return _pw_properties_new(
      key,
    );
  }

  late final _pw_properties_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_properties> Function(
              ffi.Pointer<ffi.Char>)>>('pw_properties_new');
  late final _pw_properties_new = _pw_properties_newPtr
      .asFunction<ffi.Pointer<pw_properties> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<pw_properties> pw_properties_new_dict(
    ffi.Pointer<spa_dict> dict,
  ) {
    return _pw_properties_new_dict(
      dict,
    );
  }

  late final _pw_properties_new_dictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_properties> Function(
              ffi.Pointer<spa_dict>)>>('pw_properties_new_dict');
  late final _pw_properties_new_dict = _pw_properties_new_dictPtr
      .asFunction<ffi.Pointer<pw_properties> Function(ffi.Pointer<spa_dict>)>();

  ffi.Pointer<pw_properties> pw_properties_new_string(
    ffi.Pointer<ffi.Char> args,
  ) {
    return _pw_properties_new_string(
      args,
    );
  }

  late final _pw_properties_new_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_properties> Function(
              ffi.Pointer<ffi.Char>)>>('pw_properties_new_string');
  late final _pw_properties_new_string = _pw_properties_new_stringPtr
      .asFunction<ffi.Pointer<pw_properties> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<pw_properties> pw_properties_copy(
    ffi.Pointer<pw_properties> properties,
  ) {
    return _pw_properties_copy(
      properties,
    );
  }

  late final _pw_properties_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_properties> Function(
              ffi.Pointer<pw_properties>)>>('pw_properties_copy');
  late final _pw_properties_copy = _pw_properties_copyPtr.asFunction<
      ffi.Pointer<pw_properties> Function(ffi.Pointer<pw_properties>)>();

  int pw_properties_update_keys(
    ffi.Pointer<pw_properties> props,
    ffi.Pointer<spa_dict> dict,
    ffi.Pointer<ffi.Pointer<ffi.Char>> keys,
  ) {
    return _pw_properties_update_keys(
      props,
      dict,
      keys,
    );
  }

  late final _pw_properties_update_keysPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pw_properties>,
                  ffi.Pointer<spa_dict>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'pw_properties_update_keys');
  late final _pw_properties_update_keys =
      _pw_properties_update_keysPtr.asFunction<
          int Function(ffi.Pointer<pw_properties>, ffi.Pointer<spa_dict>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int pw_properties_update_ignore(
    ffi.Pointer<pw_properties> props,
    ffi.Pointer<spa_dict> dict,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ignore,
  ) {
    return _pw_properties_update_ignore(
      props,
      dict,
      ignore,
    );
  }

  late final _pw_properties_update_ignorePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pw_properties>,
                  ffi.Pointer<spa_dict>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'pw_properties_update_ignore');
  late final _pw_properties_update_ignore =
      _pw_properties_update_ignorePtr.asFunction<
          int Function(ffi.Pointer<pw_properties>, ffi.Pointer<spa_dict>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Update props with all key/value pairs from dict
  int pw_properties_update(
    ffi.Pointer<pw_properties> props,
    ffi.Pointer<spa_dict> dict,
  ) {
    return _pw_properties_update(
      props,
      dict,
    );
  }

  late final _pw_properties_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_properties>,
              ffi.Pointer<spa_dict>)>>('pw_properties_update');
  late final _pw_properties_update = _pw_properties_updatePtr.asFunction<
      int Function(ffi.Pointer<pw_properties>, ffi.Pointer<spa_dict>)>();

  /// Update props with all key/value pairs from str
  int pw_properties_update_string(
    ffi.Pointer<pw_properties> props,
    ffi.Pointer<ffi.Char> str,
    int size,
  ) {
    return _pw_properties_update_string(
      props,
      str,
      size,
    );
  }

  late final _pw_properties_update_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_properties>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('pw_properties_update_string');
  late final _pw_properties_update_string =
      _pw_properties_update_stringPtr.asFunction<
          int Function(
              ffi.Pointer<pw_properties>, ffi.Pointer<ffi.Char>, int)>();

  int pw_properties_add(
    ffi.Pointer<pw_properties> oldprops,
    ffi.Pointer<spa_dict> dict,
  ) {
    return _pw_properties_add(
      oldprops,
      dict,
    );
  }

  late final _pw_properties_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_properties>,
              ffi.Pointer<spa_dict>)>>('pw_properties_add');
  late final _pw_properties_add = _pw_properties_addPtr.asFunction<
      int Function(ffi.Pointer<pw_properties>, ffi.Pointer<spa_dict>)>();

  int pw_properties_add_keys(
    ffi.Pointer<pw_properties> oldprops,
    ffi.Pointer<spa_dict> dict,
    ffi.Pointer<ffi.Pointer<ffi.Char>> keys,
  ) {
    return _pw_properties_add_keys(
      oldprops,
      dict,
      keys,
    );
  }

  late final _pw_properties_add_keysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_properties>, ffi.Pointer<spa_dict>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('pw_properties_add_keys');
  late final _pw_properties_add_keys = _pw_properties_add_keysPtr.asFunction<
      int Function(ffi.Pointer<pw_properties>, ffi.Pointer<spa_dict>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void pw_properties_clear(
    ffi.Pointer<pw_properties> properties,
  ) {
    return _pw_properties_clear(
      properties,
    );
  }

  late final _pw_properties_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_properties>)>>(
      'pw_properties_clear');
  late final _pw_properties_clear = _pw_properties_clearPtr
      .asFunction<void Function(ffi.Pointer<pw_properties>)>();

  void pw_properties_free(
    ffi.Pointer<pw_properties> properties,
  ) {
    return _pw_properties_free(
      properties,
    );
  }

  late final _pw_properties_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_properties>)>>(
      'pw_properties_free');
  late final _pw_properties_free = _pw_properties_freePtr
      .asFunction<void Function(ffi.Pointer<pw_properties>)>();

  int pw_properties_set(
    ffi.Pointer<pw_properties> properties,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _pw_properties_set(
      properties,
      key,
      value,
    );
  }

  late final _pw_properties_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_properties>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('pw_properties_set');
  late final _pw_properties_set = _pw_properties_setPtr.asFunction<
      int Function(ffi.Pointer<pw_properties>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int pw_properties_setf(
    ffi.Pointer<pw_properties> properties,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _pw_properties_setf(
      properties,
      key,
      format,
    );
  }

  late final _pw_properties_setfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_properties>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('pw_properties_setf');
  late final _pw_properties_setf = _pw_properties_setfPtr.asFunction<
      int Function(ffi.Pointer<pw_properties>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int pw_properties_setva(
    ffi.Pointer<pw_properties> properties,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _pw_properties_setva(
      properties,
      key,
      format,
      args,
    );
  }

  late final _pw_properties_setvaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pw_properties>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('pw_properties_setva');
  late final _pw_properties_setva = _pw_properties_setvaPtr.asFunction<
      int Function(ffi.Pointer<pw_properties>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<ffi.Char> pw_properties_get(
    ffi.Pointer<pw_properties> properties,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _pw_properties_get(
      properties,
      key,
    );
  }

  late final _pw_properties_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<pw_properties>,
              ffi.Pointer<ffi.Char>)>>('pw_properties_get');
  late final _pw_properties_get = _pw_properties_getPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<pw_properties>, ffi.Pointer<ffi.Char>)>();

  int pw_properties_fetch_uint32(
    ffi.Pointer<pw_properties> properties,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Uint32> value,
  ) {
    return _pw_properties_fetch_uint32(
      properties,
      key,
      value,
    );
  }

  late final _pw_properties_fetch_uint32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_properties>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint32>)>>('pw_properties_fetch_uint32');
  late final _pw_properties_fetch_uint32 =
      _pw_properties_fetch_uint32Ptr.asFunction<
          int Function(ffi.Pointer<pw_properties>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint32>)>();

  int pw_properties_fetch_int32(
    ffi.Pointer<pw_properties> properties,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Int32> value,
  ) {
    return _pw_properties_fetch_int32(
      properties,
      key,
      value,
    );
  }

  late final _pw_properties_fetch_int32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_properties>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int32>)>>('pw_properties_fetch_int32');
  late final _pw_properties_fetch_int32 =
      _pw_properties_fetch_int32Ptr.asFunction<
          int Function(ffi.Pointer<pw_properties>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int32>)>();

  int pw_properties_fetch_uint64(
    ffi.Pointer<pw_properties> properties,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Uint64> value,
  ) {
    return _pw_properties_fetch_uint64(
      properties,
      key,
      value,
    );
  }

  late final _pw_properties_fetch_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_properties>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>>('pw_properties_fetch_uint64');
  late final _pw_properties_fetch_uint64 =
      _pw_properties_fetch_uint64Ptr.asFunction<
          int Function(ffi.Pointer<pw_properties>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>();

  int pw_properties_fetch_int64(
    ffi.Pointer<pw_properties> properties,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Int64> value,
  ) {
    return _pw_properties_fetch_int64(
      properties,
      key,
      value,
    );
  }

  late final _pw_properties_fetch_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_properties>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int64>)>>('pw_properties_fetch_int64');
  late final _pw_properties_fetch_int64 =
      _pw_properties_fetch_int64Ptr.asFunction<
          int Function(ffi.Pointer<pw_properties>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int64>)>();

  int pw_properties_fetch_bool(
    ffi.Pointer<pw_properties> properties,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Bool> value,
  ) {
    return _pw_properties_fetch_bool(
      properties,
      key,
      value,
    );
  }

  late final _pw_properties_fetch_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_properties>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Bool>)>>('pw_properties_fetch_bool');
  late final _pw_properties_fetch_bool =
      _pw_properties_fetch_boolPtr.asFunction<
          int Function(ffi.Pointer<pw_properties>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<ffi.Char> pw_properties_iterate(
    ffi.Pointer<pw_properties> properties,
    ffi.Pointer<ffi.Pointer<ffi.Void>> state,
  ) {
    return _pw_properties_iterate(
      properties,
      state,
    );
  }

  late final _pw_properties_iteratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<pw_properties>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('pw_properties_iterate');
  late final _pw_properties_iterate = _pw_properties_iteratePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<pw_properties>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int pw_properties_serialize_dict(
    ffi.Pointer<FILE> f,
    ffi.Pointer<spa_dict> dict,
    int flags,
  ) {
    return _pw_properties_serialize_dict(
      f,
      dict,
      flags,
    );
  }

  late final _pw_properties_serialize_dictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<spa_dict>,
              ffi.Uint32)>>('pw_properties_serialize_dict');
  late final _pw_properties_serialize_dict =
      _pw_properties_serialize_dictPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<spa_dict>, int)>();

  /// Update an existing \ref pw_core_info with \a update with reset
  ffi.Pointer<pw_core_info> pw_core_info_update(
    ffi.Pointer<pw_core_info> info,
    ffi.Pointer<pw_core_info> update,
  ) {
    return _pw_core_info_update(
      info,
      update,
    );
  }

  late final _pw_core_info_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_core_info> Function(ffi.Pointer<pw_core_info>,
              ffi.Pointer<pw_core_info>)>>('pw_core_info_update');
  late final _pw_core_info_update = _pw_core_info_updatePtr.asFunction<
      ffi.Pointer<pw_core_info> Function(
          ffi.Pointer<pw_core_info>, ffi.Pointer<pw_core_info>)>();

  /// Update an existing \ref pw_core_info with \a update
  ffi.Pointer<pw_core_info> pw_core_info_merge(
    ffi.Pointer<pw_core_info> info,
    ffi.Pointer<pw_core_info> update,
    bool reset,
  ) {
    return _pw_core_info_merge(
      info,
      update,
      reset,
    );
  }

  late final _pw_core_info_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_core_info> Function(ffi.Pointer<pw_core_info>,
              ffi.Pointer<pw_core_info>, ffi.Bool)>>('pw_core_info_merge');
  late final _pw_core_info_merge = _pw_core_info_mergePtr.asFunction<
      ffi.Pointer<pw_core_info> Function(
          ffi.Pointer<pw_core_info>, ffi.Pointer<pw_core_info>, bool)>();

  /// Free a \ref pw_core_info
  void pw_core_info_free(
    ffi.Pointer<pw_core_info> info,
  ) {
    return _pw_core_info_free(
      info,
    );
  }

  late final _pw_core_info_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_core_info>)>>(
          'pw_core_info_free');
  late final _pw_core_info_free = _pw_core_info_freePtr
      .asFunction<void Function(ffi.Pointer<pw_core_info>)>();

  /// Connect to a PipeWire instance
  ///
  /// \param context a \ref pw_context
  /// \param properties optional properties, ownership of the properties is
  /// taken.
  /// \param user_data_size extra user data size
  ///
  /// \return a \ref pw_core on success or NULL with errno set on error. The core
  /// will have an id of \ref PW_ID_CORE (0)
  ffi.Pointer<pw_core> pw_context_connect(
    ffi.Pointer<pw_context> context,
    ffi.Pointer<pw_properties> properties,
    int user_data_size,
  ) {
    return _pw_context_connect(
      context,
      properties,
      user_data_size,
    );
  }

  late final _pw_context_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_core> Function(ffi.Pointer<pw_context>,
              ffi.Pointer<pw_properties>, ffi.Size)>>('pw_context_connect');
  late final _pw_context_connect = _pw_context_connectPtr.asFunction<
      ffi.Pointer<pw_core> Function(
          ffi.Pointer<pw_context>, ffi.Pointer<pw_properties>, int)>();

  /// Connect to a PipeWire instance on the given socket
  ///
  /// \param context a \ref pw_context
  /// \param fd the connected socket to use, the socket will be closed
  /// automatically on disconnect or error.
  /// \param properties optional properties, ownership of the properties is
  /// taken.
  /// \param user_data_size extra user data size
  ///
  /// \return a \ref pw_core on success or NULL with errno set on error
  ffi.Pointer<pw_core> pw_context_connect_fd(
    ffi.Pointer<pw_context> context,
    int fd,
    ffi.Pointer<pw_properties> properties,
    int user_data_size,
  ) {
    return _pw_context_connect_fd(
      context,
      fd,
      properties,
      user_data_size,
    );
  }

  late final _pw_context_connect_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_core> Function(ffi.Pointer<pw_context>, ffi.Int,
              ffi.Pointer<pw_properties>, ffi.Size)>>('pw_context_connect_fd');
  late final _pw_context_connect_fd = _pw_context_connect_fdPtr.asFunction<
      ffi.Pointer<pw_core> Function(
          ffi.Pointer<pw_context>, int, ffi.Pointer<pw_properties>, int)>();

  /// Connect to a given PipeWire instance
  ///
  /// \param context a \ref pw_context to connect to
  /// \param properties optional properties, ownership of the properties is
  /// taken.
  /// \param user_data_size extra user data size
  ///
  /// \return a \ref pw_core on success or NULL with errno set on error
  ffi.Pointer<pw_core> pw_context_connect_self(
    ffi.Pointer<pw_context> context,
    ffi.Pointer<pw_properties> properties,
    int user_data_size,
  ) {
    return _pw_context_connect_self(
      context,
      properties,
      user_data_size,
    );
  }

  late final _pw_context_connect_selfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_core> Function(
              ffi.Pointer<pw_context>,
              ffi.Pointer<pw_properties>,
              ffi.Size)>>('pw_context_connect_self');
  late final _pw_context_connect_self = _pw_context_connect_selfPtr.asFunction<
      ffi.Pointer<pw_core> Function(
          ffi.Pointer<pw_context>, ffi.Pointer<pw_properties>, int)>();

  /// Steal the fd of the core connection or < 0 on error. The core
  /// will be disconnected after this call.
  int pw_core_steal_fd(
    ffi.Pointer<pw_core> core,
  ) {
    return _pw_core_steal_fd(
      core,
    );
  }

  late final _pw_core_steal_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pw_core>)>>(
          'pw_core_steal_fd');
  late final _pw_core_steal_fd =
      _pw_core_steal_fdPtr.asFunction<int Function(ffi.Pointer<pw_core>)>();

  /// Pause or resume the core. When the core is paused, no new events
  /// will be dispatched until the core is resumed again.
  int pw_core_set_paused(
    ffi.Pointer<pw_core> core,
    bool paused,
  ) {
    return _pw_core_set_paused(
      core,
      paused,
    );
  }

  late final _pw_core_set_pausedPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pw_core>, ffi.Bool)>>(
      'pw_core_set_paused');
  late final _pw_core_set_paused = _pw_core_set_pausedPtr
      .asFunction<int Function(ffi.Pointer<pw_core>, bool)>();

  /// disconnect and destroy a core
  int pw_core_disconnect(
    ffi.Pointer<pw_core> core,
  ) {
    return _pw_core_disconnect(
      core,
    );
  }

  late final _pw_core_disconnectPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pw_core>)>>(
          'pw_core_disconnect');
  late final _pw_core_disconnect =
      _pw_core_disconnectPtr.asFunction<int Function(ffi.Pointer<pw_core>)>();

  /// Get the user_data. It is of the size specified when this object was
  /// constructed
  ffi.Pointer<ffi.Void> pw_core_get_user_data(
    ffi.Pointer<pw_core> core,
  ) {
    return _pw_core_get_user_data(
      core,
    );
  }

  late final _pw_core_get_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<pw_core>)>>('pw_core_get_user_data');
  late final _pw_core_get_user_data = _pw_core_get_user_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<pw_core>)>();

  /// Get the client proxy of the connected core. This will have the id
  /// of PW_ID_CLIENT (1)
  ffi.Pointer<pw_client> pw_core_get_client(
    ffi.Pointer<pw_core> core,
  ) {
    return _pw_core_get_client(
      core,
    );
  }

  late final _pw_core_get_clientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_client> Function(
              ffi.Pointer<pw_core>)>>('pw_core_get_client');
  late final _pw_core_get_client = _pw_core_get_clientPtr
      .asFunction<ffi.Pointer<pw_client> Function(ffi.Pointer<pw_core>)>();

  /// Get the context object used to created this core
  ffi.Pointer<pw_context> pw_core_get_context(
    ffi.Pointer<pw_core> core,
  ) {
    return _pw_core_get_context(
      core,
    );
  }

  late final _pw_core_get_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_context> Function(
              ffi.Pointer<pw_core>)>>('pw_core_get_context');
  late final _pw_core_get_context = _pw_core_get_contextPtr
      .asFunction<ffi.Pointer<pw_context> Function(ffi.Pointer<pw_core>)>();

  /// Get properties from the core
  ffi.Pointer<pw_properties> pw_core_get_properties(
    ffi.Pointer<pw_core> core,
  ) {
    return _pw_core_get_properties(
      core,
    );
  }

  late final _pw_core_get_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_properties> Function(
              ffi.Pointer<pw_core>)>>('pw_core_get_properties');
  late final _pw_core_get_properties = _pw_core_get_propertiesPtr
      .asFunction<ffi.Pointer<pw_properties> Function(ffi.Pointer<pw_core>)>();

  /// Update the core properties. This updates the properties
  /// of the associated client.
  /// \return the number of properties that were updated
  int pw_core_update_properties(
    ffi.Pointer<pw_core> core,
    ffi.Pointer<spa_dict> dict,
  ) {
    return _pw_core_update_properties(
      core,
      dict,
    );
  }

  late final _pw_core_update_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_core>,
              ffi.Pointer<spa_dict>)>>('pw_core_update_properties');
  late final _pw_core_update_properties = _pw_core_update_propertiesPtr
      .asFunction<int Function(ffi.Pointer<pw_core>, ffi.Pointer<spa_dict>)>();

  /// Get the core mempool object
  ffi.Pointer<pw_mempool> pw_core_get_mempool(
    ffi.Pointer<pw_core> core,
  ) {
    return _pw_core_get_mempool(
      core,
    );
  }

  late final _pw_core_get_mempoolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_mempool> Function(
              ffi.Pointer<pw_core>)>>('pw_core_get_mempool');
  late final _pw_core_get_mempool = _pw_core_get_mempoolPtr
      .asFunction<ffi.Pointer<pw_mempool> Function(ffi.Pointer<pw_core>)>();

  /// Get the proxy with the given id
  ffi.Pointer<pw_proxy> pw_core_find_proxy(
    ffi.Pointer<pw_core> core,
    int id,
  ) {
    return _pw_core_find_proxy(
      core,
      id,
    );
  }

  late final _pw_core_find_proxyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_proxy> Function(
              ffi.Pointer<pw_core>, ffi.Uint32)>>('pw_core_find_proxy');
  late final _pw_core_find_proxy = _pw_core_find_proxyPtr
      .asFunction<ffi.Pointer<pw_proxy> Function(ffi.Pointer<pw_core>, int)>();

  /// Export an object into the PipeWire instance associated with core
  ffi.Pointer<pw_proxy> pw_core_export(
    ffi.Pointer<pw_core> core,
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<spa_dict> props,
    ffi.Pointer<ffi.Void> object,
    int user_data_size,
  ) {
    return _pw_core_export(
      core,
      type,
      props,
      object,
      user_data_size,
    );
  }

  late final _pw_core_exportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_proxy> Function(
              ffi.Pointer<pw_core>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<spa_dict>,
              ffi.Pointer<ffi.Void>,
              ffi.Size)>>('pw_core_export');
  late final _pw_core_export = _pw_core_exportPtr.asFunction<
      ffi.Pointer<pw_proxy> Function(
          ffi.Pointer<pw_core>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<spa_dict>,
          ffi.Pointer<ffi.Void>,
          int)>();

  ffi.Pointer<pw_loop> pw_loop_new(
    ffi.Pointer<spa_dict> props,
  ) {
    return _pw_loop_new(
      props,
    );
  }

  late final _pw_loop_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_loop> Function(ffi.Pointer<spa_dict>)>>('pw_loop_new');
  late final _pw_loop_new = _pw_loop_newPtr
      .asFunction<ffi.Pointer<pw_loop> Function(ffi.Pointer<spa_dict>)>();

  void pw_loop_destroy(
    ffi.Pointer<pw_loop> loop,
  ) {
    return _pw_loop_destroy(
      loop,
    );
  }

  late final _pw_loop_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_loop>)>>(
          'pw_loop_destroy');
  late final _pw_loop_destroy =
      _pw_loop_destroyPtr.asFunction<void Function(ffi.Pointer<pw_loop>)>();

  /// Make a new context object for a given main_loop. Ownership of the properties is taken
  ffi.Pointer<pw_context> pw_context_new(
    ffi.Pointer<pw_loop> main_loop,
    ffi.Pointer<pw_properties> props,
    int user_data_size,
  ) {
    return _pw_context_new(
      main_loop,
      props,
      user_data_size,
    );
  }

  late final _pw_context_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_context> Function(ffi.Pointer<pw_loop>,
              ffi.Pointer<pw_properties>, ffi.Size)>>('pw_context_new');
  late final _pw_context_new = _pw_context_newPtr.asFunction<
      ffi.Pointer<pw_context> Function(
          ffi.Pointer<pw_loop>, ffi.Pointer<pw_properties>, int)>();

  /// destroy a context object, all resources except the main_loop will be destroyed
  void pw_context_destroy(
    ffi.Pointer<pw_context> context,
  ) {
    return _pw_context_destroy(
      context,
    );
  }

  late final _pw_context_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_context>)>>(
          'pw_context_destroy');
  late final _pw_context_destroy = _pw_context_destroyPtr
      .asFunction<void Function(ffi.Pointer<pw_context>)>();

  /// Get the context user data
  ffi.Pointer<ffi.Void> pw_context_get_user_data(
    ffi.Pointer<pw_context> context,
  ) {
    return _pw_context_get_user_data(
      context,
    );
  }

  late final _pw_context_get_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<pw_context>)>>('pw_context_get_user_data');
  late final _pw_context_get_user_data = _pw_context_get_user_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<pw_context>)>();

  /// Add a new event listener to a context
  void pw_context_add_listener(
    ffi.Pointer<pw_context> context,
    ffi.Pointer<spa_hook> listener,
    ffi.Pointer<pw_context_events> events,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _pw_context_add_listener(
      context,
      listener,
      events,
      data,
    );
  }

  late final _pw_context_add_listenerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pw_context>,
              ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_context_events>,
              ffi.Pointer<ffi.Void>)>>('pw_context_add_listener');
  late final _pw_context_add_listener = _pw_context_add_listenerPtr.asFunction<
      void Function(ffi.Pointer<pw_context>, ffi.Pointer<spa_hook>,
          ffi.Pointer<pw_context_events>, ffi.Pointer<ffi.Void>)>();

  /// Get the context properties
  ffi.Pointer<pw_properties> pw_context_get_properties(
    ffi.Pointer<pw_context> context,
  ) {
    return _pw_context_get_properties(
      context,
    );
  }

  late final _pw_context_get_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_properties> Function(
              ffi.Pointer<pw_context>)>>('pw_context_get_properties');
  late final _pw_context_get_properties =
      _pw_context_get_propertiesPtr.asFunction<
          ffi.Pointer<pw_properties> Function(ffi.Pointer<pw_context>)>();

  /// Update the context properties
  int pw_context_update_properties(
    ffi.Pointer<pw_context> context,
    ffi.Pointer<spa_dict> dict,
  ) {
    return _pw_context_update_properties(
      context,
      dict,
    );
  }

  late final _pw_context_update_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_context>,
              ffi.Pointer<spa_dict>)>>('pw_context_update_properties');
  late final _pw_context_update_properties =
      _pw_context_update_propertiesPtr.asFunction<
          int Function(ffi.Pointer<pw_context>, ffi.Pointer<spa_dict>)>();

  /// Get a config section for this context. Since 0.3.22, deprecated,
  /// use pw_context_conf_section_for_each().
  ffi.Pointer<ffi.Char> pw_context_get_conf_section(
    ffi.Pointer<pw_context> context,
    ffi.Pointer<ffi.Char> section,
  ) {
    return _pw_context_get_conf_section(
      context,
      section,
    );
  }

  late final _pw_context_get_conf_sectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<pw_context>,
              ffi.Pointer<ffi.Char>)>>('pw_context_get_conf_section');
  late final _pw_context_get_conf_section =
      _pw_context_get_conf_sectionPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pw_context>, ffi.Pointer<ffi.Char>)>();

  /// Parse a standard config section for this context. Since 0.3.22
  int pw_context_parse_conf_section(
    ffi.Pointer<pw_context> context,
    ffi.Pointer<pw_properties> conf,
    ffi.Pointer<ffi.Char> section,
  ) {
    return _pw_context_parse_conf_section(
      context,
      conf,
      section,
    );
  }

  late final _pw_context_parse_conf_sectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_context>, ffi.Pointer<pw_properties>,
              ffi.Pointer<ffi.Char>)>>('pw_context_parse_conf_section');
  late final _pw_context_parse_conf_section =
      _pw_context_parse_conf_sectionPtr.asFunction<
          int Function(ffi.Pointer<pw_context>, ffi.Pointer<pw_properties>,
              ffi.Pointer<ffi.Char>)>();

  /// update properties from a section into props. Since 0.3.45
  int pw_context_conf_update_props(
    ffi.Pointer<pw_context> context,
    ffi.Pointer<ffi.Char> section,
    ffi.Pointer<pw_properties> props,
  ) {
    return _pw_context_conf_update_props(
      context,
      section,
      props,
    );
  }

  late final _pw_context_conf_update_propsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_context>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<pw_properties>)>>('pw_context_conf_update_props');
  late final _pw_context_conf_update_props =
      _pw_context_conf_update_propsPtr.asFunction<
          int Function(ffi.Pointer<pw_context>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<pw_properties>)>();

  /// emit callback for all config sections. Since 0.3.45
  int pw_context_conf_section_for_each(
    ffi.Pointer<pw_context> context,
    ffi.Pointer<ffi.Char> section,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
                    ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>>
        callback,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _pw_context_conf_section_for_each(
      context,
      section,
      callback,
      data,
    );
  }

  late final _pw_context_conf_section_for_eachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pw_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size)>>,
              ffi.Pointer<ffi.Void>)>>('pw_context_conf_section_for_each');
  late final _pw_context_conf_section_for_each =
      _pw_context_conf_section_for_eachPtr.asFunction<
          int Function(
              ffi.Pointer<pw_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size)>>,
              ffi.Pointer<ffi.Void>)>();

  /// emit callback for all matched properties. Since 0.3.46
  int pw_context_conf_section_match_rules(
    ffi.Pointer<pw_context> context,
    ffi.Pointer<ffi.Char> section,
    ffi.Pointer<spa_dict> props,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
                    ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>>
        callback,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _pw_context_conf_section_match_rules(
      context,
      section,
      props,
      callback,
      data,
    );
  }

  late final _pw_context_conf_section_match_rulesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pw_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<spa_dict>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size)>>,
              ffi.Pointer<ffi.Void>)>>('pw_context_conf_section_match_rules');
  late final _pw_context_conf_section_match_rules =
      _pw_context_conf_section_match_rulesPtr.asFunction<
          int Function(
              ffi.Pointer<pw_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<spa_dict>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size)>>,
              ffi.Pointer<ffi.Void>)>();

  /// Get the context support objects
  ffi.Pointer<spa_support> pw_context_get_support(
    ffi.Pointer<pw_context> context,
    ffi.Pointer<ffi.Uint32> n_support,
  ) {
    return _pw_context_get_support(
      context,
      n_support,
    );
  }

  late final _pw_context_get_supportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<spa_support> Function(ffi.Pointer<pw_context>,
              ffi.Pointer<ffi.Uint32>)>>('pw_context_get_support');
  late final _pw_context_get_support = _pw_context_get_supportPtr.asFunction<
      ffi.Pointer<spa_support> Function(
          ffi.Pointer<pw_context>, ffi.Pointer<ffi.Uint32>)>();

  /// get the context main loop
  ffi.Pointer<pw_loop> pw_context_get_main_loop(
    ffi.Pointer<pw_context> context,
  ) {
    return _pw_context_get_main_loop(
      context,
    );
  }

  late final _pw_context_get_main_loopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_loop> Function(
              ffi.Pointer<pw_context>)>>('pw_context_get_main_loop');
  late final _pw_context_get_main_loop = _pw_context_get_main_loopPtr
      .asFunction<ffi.Pointer<pw_loop> Function(ffi.Pointer<pw_context>)>();

  /// Get the work queue from the context: Since 0.3.26
  ffi.Pointer<pw_work_queue> pw_context_get_work_queue(
    ffi.Pointer<pw_context> context,
  ) {
    return _pw_context_get_work_queue(
      context,
    );
  }

  late final _pw_context_get_work_queuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_work_queue> Function(
              ffi.Pointer<pw_context>)>>('pw_context_get_work_queue');
  late final _pw_context_get_work_queue =
      _pw_context_get_work_queuePtr.asFunction<
          ffi.Pointer<pw_work_queue> Function(ffi.Pointer<pw_context>)>();

  /// Iterate the globals of the context. The callback should return
  /// 0 to fetch the next item, any other value stops the iteration and returns
  /// the value. When all callbacks return 0, this function returns 0 when all
  /// globals are iterated.
  int pw_context_for_each_global(
    ffi.Pointer<pw_context> context,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<pw_global>)>>
        callback,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _pw_context_for_each_global(
      context,
      callback,
      data,
    );
  }

  late final _pw_context_for_each_globalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pw_context>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>, ffi.Pointer<pw_global>)>>,
              ffi.Pointer<ffi.Void>)>>('pw_context_for_each_global');
  late final _pw_context_for_each_global =
      _pw_context_for_each_globalPtr.asFunction<
          int Function(
              ffi.Pointer<pw_context>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>, ffi.Pointer<pw_global>)>>,
              ffi.Pointer<ffi.Void>)>();

  /// Find a context global by id
  ffi.Pointer<pw_global> pw_context_find_global(
    ffi.Pointer<pw_context> context,
    int id,
  ) {
    return _pw_context_find_global(
      context,
      id,
    );
  }

  late final _pw_context_find_globalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_global> Function(
              ffi.Pointer<pw_context>, ffi.Uint32)>>('pw_context_find_global');
  late final _pw_context_find_global = _pw_context_find_globalPtr.asFunction<
      ffi.Pointer<pw_global> Function(ffi.Pointer<pw_context>, int)>();

  /// add a spa library for the given factory_name regex
  int pw_context_add_spa_lib(
    ffi.Pointer<pw_context> context,
    ffi.Pointer<ffi.Char> factory_regex,
    ffi.Pointer<ffi.Char> lib,
  ) {
    return _pw_context_add_spa_lib(
      context,
      factory_regex,
      lib,
    );
  }

  late final _pw_context_add_spa_libPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_context>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('pw_context_add_spa_lib');
  late final _pw_context_add_spa_lib = _pw_context_add_spa_libPtr.asFunction<
      int Function(ffi.Pointer<pw_context>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// find the library name for a spa factory
  ffi.Pointer<ffi.Char> pw_context_find_spa_lib(
    ffi.Pointer<pw_context> context,
    ffi.Pointer<ffi.Char> factory_name,
  ) {
    return _pw_context_find_spa_lib(
      context,
      factory_name,
    );
  }

  late final _pw_context_find_spa_libPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<pw_context>,
              ffi.Pointer<ffi.Char>)>>('pw_context_find_spa_lib');
  late final _pw_context_find_spa_lib = _pw_context_find_spa_libPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<pw_context>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<spa_handle> pw_context_load_spa_handle(
    ffi.Pointer<pw_context> context,
    ffi.Pointer<ffi.Char> factory_name,
    ffi.Pointer<spa_dict> info,
  ) {
    return _pw_context_load_spa_handle(
      context,
      factory_name,
      info,
    );
  }

  late final _pw_context_load_spa_handlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<spa_handle> Function(
              ffi.Pointer<pw_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<spa_dict>)>>('pw_context_load_spa_handle');
  late final _pw_context_load_spa_handle =
      _pw_context_load_spa_handlePtr.asFunction<
          ffi.Pointer<spa_handle> Function(ffi.Pointer<pw_context>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<spa_dict>)>();

  /// register a type that can be exported on a context_proxy. This is usually used by
  /// extension modules
  int pw_context_register_export_type(
    ffi.Pointer<pw_context> context,
    ffi.Pointer<pw_export_type> type,
  ) {
    return _pw_context_register_export_type(
      context,
      type,
    );
  }

  late final _pw_context_register_export_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_context>,
              ffi.Pointer<pw_export_type>)>>('pw_context_register_export_type');
  late final _pw_context_register_export_type =
      _pw_context_register_export_typePtr.asFunction<
          int Function(ffi.Pointer<pw_context>, ffi.Pointer<pw_export_type>)>();

  /// find information about registered export type
  ffi.Pointer<pw_export_type> pw_context_find_export_type(
    ffi.Pointer<pw_context> context,
    ffi.Pointer<ffi.Char> type,
  ) {
    return _pw_context_find_export_type(
      context,
      type,
    );
  }

  late final _pw_context_find_export_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_export_type> Function(ffi.Pointer<pw_context>,
              ffi.Pointer<ffi.Char>)>>('pw_context_find_export_type');
  late final _pw_context_find_export_type =
      _pw_context_find_export_typePtr.asFunction<
          ffi.Pointer<pw_export_type> Function(
              ffi.Pointer<pw_context>, ffi.Pointer<ffi.Char>)>();

  /// add an object to the context
  int pw_context_set_object(
    ffi.Pointer<pw_context> context,
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _pw_context_set_object(
      context,
      type,
      value,
    );
  }

  late final _pw_context_set_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_context>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('pw_context_set_object');
  late final _pw_context_set_object = _pw_context_set_objectPtr.asFunction<
      int Function(ffi.Pointer<pw_context>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  /// get an object from the context
  ffi.Pointer<ffi.Void> pw_context_get_object(
    ffi.Pointer<pw_context> context,
    ffi.Pointer<ffi.Char> type,
  ) {
    return _pw_context_get_object(
      context,
      type,
    );
  }

  late final _pw_context_get_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<pw_context>,
              ffi.Pointer<ffi.Char>)>>('pw_context_get_object');
  late final _pw_context_get_object = _pw_context_get_objectPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<pw_context>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> pw_split_walk(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Char> delimiter,
    ffi.Pointer<ffi.Size> len,
    ffi.Pointer<ffi.Pointer<ffi.Char>> state,
  ) {
    return _pw_split_walk(
      str,
      delimiter,
      len,
      state,
    );
  }

  late final _pw_split_walkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('pw_split_walk');
  late final _pw_split_walk = _pw_split_walkPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> pw_split_strv(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Char> delimiter,
    int max_tokens,
    ffi.Pointer<ffi.Int> n_tokens,
  ) {
    return _pw_split_strv(
      str,
      delimiter,
      max_tokens,
      n_tokens,
    );
  }

  late final _pw_split_strvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Int>)>>('pw_split_strv');
  late final _pw_split_strv = _pw_split_strvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Int>)>();

  void pw_free_strv(
    ffi.Pointer<ffi.Pointer<ffi.Char>> str,
  ) {
    return _pw_free_strv(
      str,
    );
  }

  late final _pw_free_strvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('pw_free_strv');
  late final _pw_free_strv = _pw_free_strvPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> pw_strip(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Char> whitespace,
  ) {
    return _pw_strip(
      str,
      whitespace,
    );
  }

  late final _pw_stripPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('pw_strip');
  late final _pw_strip = _pw_stripPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int pw_getrandom(
    ffi.Pointer<ffi.Void> buf,
    int buflen,
    int flags,
  ) {
    return _pw_getrandom(
      buf,
      buflen,
      flags,
    );
  }

  late final _pw_getrandomPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.UnsignedInt)>>('pw_getrandom');
  late final _pw_getrandom = _pw_getrandomPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<pw_protocol> pw_protocol_new(
    ffi.Pointer<pw_context> context,
    ffi.Pointer<ffi.Char> name,
    int user_data_size,
  ) {
    return _pw_protocol_new(
      context,
      name,
      user_data_size,
    );
  }

  late final _pw_protocol_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_protocol> Function(ffi.Pointer<pw_context>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('pw_protocol_new');
  late final _pw_protocol_new = _pw_protocol_newPtr.asFunction<
      ffi.Pointer<pw_protocol> Function(
          ffi.Pointer<pw_context>, ffi.Pointer<ffi.Char>, int)>();

  void pw_protocol_destroy(
    ffi.Pointer<pw_protocol> protocol,
  ) {
    return _pw_protocol_destroy(
      protocol,
    );
  }

  late final _pw_protocol_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_protocol>)>>(
          'pw_protocol_destroy');
  late final _pw_protocol_destroy = _pw_protocol_destroyPtr
      .asFunction<void Function(ffi.Pointer<pw_protocol>)>();

  ffi.Pointer<pw_context> pw_protocol_get_context(
    ffi.Pointer<pw_protocol> protocol,
  ) {
    return _pw_protocol_get_context(
      protocol,
    );
  }

  late final _pw_protocol_get_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_context> Function(
              ffi.Pointer<pw_protocol>)>>('pw_protocol_get_context');
  late final _pw_protocol_get_context = _pw_protocol_get_contextPtr
      .asFunction<ffi.Pointer<pw_context> Function(ffi.Pointer<pw_protocol>)>();

  ffi.Pointer<ffi.Void> pw_protocol_get_user_data(
    ffi.Pointer<pw_protocol> protocol,
  ) {
    return _pw_protocol_get_user_data(
      protocol,
    );
  }

  late final _pw_protocol_get_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<pw_protocol>)>>('pw_protocol_get_user_data');
  late final _pw_protocol_get_user_data = _pw_protocol_get_user_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<pw_protocol>)>();

  ffi.Pointer<pw_protocol_implementation> pw_protocol_get_implementation(
    ffi.Pointer<pw_protocol> protocol,
  ) {
    return _pw_protocol_get_implementation(
      protocol,
    );
  }

  late final _pw_protocol_get_implementationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_protocol_implementation> Function(
              ffi.Pointer<pw_protocol>)>>('pw_protocol_get_implementation');
  late final _pw_protocol_get_implementation =
      _pw_protocol_get_implementationPtr.asFunction<
          ffi.Pointer<pw_protocol_implementation> Function(
              ffi.Pointer<pw_protocol>)>();

  ffi.Pointer<ffi.Void> pw_protocol_get_extension(
    ffi.Pointer<pw_protocol> protocol,
  ) {
    return _pw_protocol_get_extension(
      protocol,
    );
  }

  late final _pw_protocol_get_extensionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<pw_protocol>)>>('pw_protocol_get_extension');
  late final _pw_protocol_get_extension = _pw_protocol_get_extensionPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<pw_protocol>)>();

  void pw_protocol_add_listener(
    ffi.Pointer<pw_protocol> protocol,
    ffi.Pointer<spa_hook> listener,
    ffi.Pointer<pw_protocol_events> events,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _pw_protocol_add_listener(
      protocol,
      listener,
      events,
      data,
    );
  }

  late final _pw_protocol_add_listenerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pw_protocol>,
              ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_protocol_events>,
              ffi.Pointer<ffi.Void>)>>('pw_protocol_add_listener');
  late final _pw_protocol_add_listener =
      _pw_protocol_add_listenerPtr.asFunction<
          void Function(ffi.Pointer<pw_protocol>, ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_protocol_events>, ffi.Pointer<ffi.Void>)>();

  int pw_protocol_add_marshal(
    ffi.Pointer<pw_protocol> protocol,
    ffi.Pointer<pw_protocol_marshal> marshal,
  ) {
    return _pw_protocol_add_marshal(
      protocol,
      marshal,
    );
  }

  late final _pw_protocol_add_marshalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_protocol>,
              ffi.Pointer<pw_protocol_marshal>)>>('pw_protocol_add_marshal');
  late final _pw_protocol_add_marshal = _pw_protocol_add_marshalPtr.asFunction<
      int Function(
          ffi.Pointer<pw_protocol>, ffi.Pointer<pw_protocol_marshal>)>();

  ffi.Pointer<pw_protocol_marshal> pw_protocol_get_marshal(
    ffi.Pointer<pw_protocol> protocol,
    ffi.Pointer<ffi.Char> type,
    int version,
    int flags,
  ) {
    return _pw_protocol_get_marshal(
      protocol,
      type,
      version,
      flags,
    );
  }

  late final _pw_protocol_get_marshalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_protocol_marshal> Function(
              ffi.Pointer<pw_protocol>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint32,
              ffi.Uint32)>>('pw_protocol_get_marshal');
  late final _pw_protocol_get_marshal = _pw_protocol_get_marshalPtr.asFunction<
      ffi.Pointer<pw_protocol_marshal> Function(
          ffi.Pointer<pw_protocol>, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<pw_protocol> pw_context_find_protocol(
    ffi.Pointer<pw_context> context,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _pw_context_find_protocol(
      context,
      name,
    );
  }

  late final _pw_context_find_protocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_protocol> Function(ffi.Pointer<pw_context>,
              ffi.Pointer<ffi.Char>)>>('pw_context_find_protocol');
  late final _pw_context_find_protocol =
      _pw_context_find_protocolPtr.asFunction<
          ffi.Pointer<pw_protocol> Function(
              ffi.Pointer<pw_context>, ffi.Pointer<ffi.Char>)>();

  /// Make a new proxy object. The id can be used to bind to a remote object and
  /// can be retrieved with \ref pw_proxy_get_id .
  ffi.Pointer<pw_proxy> pw_proxy_new(
    ffi.Pointer<pw_proxy> factory1,
    ffi.Pointer<ffi.Char> type,
    int version,
    int user_data_size,
  ) {
    return _pw_proxy_new(
      factory1,
      type,
      version,
      user_data_size,
    );
  }

  late final _pw_proxy_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_proxy> Function(ffi.Pointer<pw_proxy>,
              ffi.Pointer<ffi.Char>, ffi.Uint32, ffi.Size)>>('pw_proxy_new');
  late final _pw_proxy_new = _pw_proxy_newPtr.asFunction<
      ffi.Pointer<pw_proxy> Function(
          ffi.Pointer<pw_proxy>, ffi.Pointer<ffi.Char>, int, int)>();

  /// Add an event listener to proxy
  void pw_proxy_add_listener(
    ffi.Pointer<pw_proxy> proxy,
    ffi.Pointer<spa_hook> listener,
    ffi.Pointer<pw_proxy_events> events,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _pw_proxy_add_listener(
      proxy,
      listener,
      events,
      data,
    );
  }

  late final _pw_proxy_add_listenerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pw_proxy>,
              ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_proxy_events>,
              ffi.Pointer<ffi.Void>)>>('pw_proxy_add_listener');
  late final _pw_proxy_add_listener = _pw_proxy_add_listenerPtr.asFunction<
      void Function(ffi.Pointer<pw_proxy>, ffi.Pointer<spa_hook>,
          ffi.Pointer<pw_proxy_events>, ffi.Pointer<ffi.Void>)>();

  /// Add a listener for the events received from the remote object. The
  /// events depend on the type of the remote object type.
  void pw_proxy_add_object_listener(
    ffi.Pointer<pw_proxy> proxy,
    ffi.Pointer<spa_hook> listener,
    ffi.Pointer<ffi.Void> funcs,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _pw_proxy_add_object_listener(
      proxy,
      listener,
      funcs,
      data,
    );
  }

  late final _pw_proxy_add_object_listenerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pw_proxy>,
              ffi.Pointer<spa_hook>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('pw_proxy_add_object_listener');
  late final _pw_proxy_add_object_listener =
      _pw_proxy_add_object_listenerPtr.asFunction<
          void Function(ffi.Pointer<pw_proxy>, ffi.Pointer<spa_hook>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// destroy a proxy
  void pw_proxy_destroy(
    ffi.Pointer<pw_proxy> proxy,
  ) {
    return _pw_proxy_destroy(
      proxy,
    );
  }

  late final _pw_proxy_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_proxy>)>>(
          'pw_proxy_destroy');
  late final _pw_proxy_destroy =
      _pw_proxy_destroyPtr.asFunction<void Function(ffi.Pointer<pw_proxy>)>();

  void pw_proxy_ref(
    ffi.Pointer<pw_proxy> proxy,
  ) {
    return _pw_proxy_ref(
      proxy,
    );
  }

  late final _pw_proxy_refPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_proxy>)>>(
          'pw_proxy_ref');
  late final _pw_proxy_ref =
      _pw_proxy_refPtr.asFunction<void Function(ffi.Pointer<pw_proxy>)>();

  void pw_proxy_unref(
    ffi.Pointer<pw_proxy> proxy,
  ) {
    return _pw_proxy_unref(
      proxy,
    );
  }

  late final _pw_proxy_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_proxy>)>>(
          'pw_proxy_unref');
  late final _pw_proxy_unref =
      _pw_proxy_unrefPtr.asFunction<void Function(ffi.Pointer<pw_proxy>)>();

  /// Get the user_data. The size was given in \ref pw_proxy_new
  ffi.Pointer<ffi.Void> pw_proxy_get_user_data(
    ffi.Pointer<pw_proxy> proxy,
  ) {
    return _pw_proxy_get_user_data(
      proxy,
    );
  }

  late final _pw_proxy_get_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<pw_proxy>)>>('pw_proxy_get_user_data');
  late final _pw_proxy_get_user_data = _pw_proxy_get_user_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<pw_proxy>)>();

  /// Get the local id of the proxy
  int pw_proxy_get_id(
    ffi.Pointer<pw_proxy> proxy,
  ) {
    return _pw_proxy_get_id(
      proxy,
    );
  }

  late final _pw_proxy_get_idPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<pw_proxy>)>>(
          'pw_proxy_get_id');
  late final _pw_proxy_get_id =
      _pw_proxy_get_idPtr.asFunction<int Function(ffi.Pointer<pw_proxy>)>();

  /// Get the type and version of the proxy
  ffi.Pointer<ffi.Char> pw_proxy_get_type(
    ffi.Pointer<pw_proxy> proxy,
    ffi.Pointer<ffi.Uint32> version,
  ) {
    return _pw_proxy_get_type(
      proxy,
      version,
    );
  }

  late final _pw_proxy_get_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<pw_proxy>,
              ffi.Pointer<ffi.Uint32>)>>('pw_proxy_get_type');
  late final _pw_proxy_get_type = _pw_proxy_get_typePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<pw_proxy>, ffi.Pointer<ffi.Uint32>)>();

  /// Get the protocol used for the proxy
  ffi.Pointer<pw_protocol> pw_proxy_get_protocol(
    ffi.Pointer<pw_proxy> proxy,
  ) {
    return _pw_proxy_get_protocol(
      proxy,
    );
  }

  late final _pw_proxy_get_protocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_protocol> Function(
              ffi.Pointer<pw_proxy>)>>('pw_proxy_get_protocol');
  late final _pw_proxy_get_protocol = _pw_proxy_get_protocolPtr
      .asFunction<ffi.Pointer<pw_protocol> Function(ffi.Pointer<pw_proxy>)>();

  /// Generate an sync method for a proxy. This will generate a done event
  /// with the same seq number of the reply.
  int pw_proxy_sync(
    ffi.Pointer<pw_proxy> proxy,
    int seq,
  ) {
    return _pw_proxy_sync(
      proxy,
      seq,
    );
  }

  late final _pw_proxy_syncPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pw_proxy>, ffi.Int)>>(
      'pw_proxy_sync');
  late final _pw_proxy_sync =
      _pw_proxy_syncPtr.asFunction<int Function(ffi.Pointer<pw_proxy>, int)>();

  /// Set the global id this proxy is bound to. This is usually used internally
  /// and will also emit the bound event
  int pw_proxy_set_bound_id(
    ffi.Pointer<pw_proxy> proxy,
    int global_id,
  ) {
    return _pw_proxy_set_bound_id(
      proxy,
      global_id,
    );
  }

  late final _pw_proxy_set_bound_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pw_proxy>, ffi.Uint32)>>('pw_proxy_set_bound_id');
  late final _pw_proxy_set_bound_id = _pw_proxy_set_bound_idPtr
      .asFunction<int Function(ffi.Pointer<pw_proxy>, int)>();

  /// Get the global id bound to this proxy of SPA_ID_INVALID when not bound
  /// to a global
  int pw_proxy_get_bound_id(
    ffi.Pointer<pw_proxy> proxy,
  ) {
    return _pw_proxy_get_bound_id(
      proxy,
    );
  }

  late final _pw_proxy_get_bound_idPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<pw_proxy>)>>(
          'pw_proxy_get_bound_id');
  late final _pw_proxy_get_bound_id = _pw_proxy_get_bound_idPtr
      .asFunction<int Function(ffi.Pointer<pw_proxy>)>();

  /// Generate an error for a proxy
  int pw_proxy_error(
    ffi.Pointer<pw_proxy> proxy,
    int res,
    ffi.Pointer<ffi.Char> error,
  ) {
    return _pw_proxy_error(
      proxy,
      res,
      error,
    );
  }

  late final _pw_proxy_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_proxy>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('pw_proxy_error');
  late final _pw_proxy_error = _pw_proxy_errorPtr.asFunction<
      int Function(ffi.Pointer<pw_proxy>, int, ffi.Pointer<ffi.Char>)>();

  int pw_proxy_errorf(
    ffi.Pointer<pw_proxy> proxy,
    int res,
    ffi.Pointer<ffi.Char> error,
  ) {
    return _pw_proxy_errorf(
      proxy,
      res,
      error,
    );
  }

  late final _pw_proxy_errorfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_proxy>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('pw_proxy_errorf');
  late final _pw_proxy_errorf = _pw_proxy_errorfPtr.asFunction<
      int Function(ffi.Pointer<pw_proxy>, int, ffi.Pointer<ffi.Char>)>();

  /// Get the listener of proxy
  ffi.Pointer<spa_hook_list> pw_proxy_get_object_listeners(
    ffi.Pointer<pw_proxy> proxy,
  ) {
    return _pw_proxy_get_object_listeners(
      proxy,
    );
  }

  late final _pw_proxy_get_object_listenersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<spa_hook_list> Function(
              ffi.Pointer<pw_proxy>)>>('pw_proxy_get_object_listeners');
  late final _pw_proxy_get_object_listeners = _pw_proxy_get_object_listenersPtr
      .asFunction<ffi.Pointer<spa_hook_list> Function(ffi.Pointer<pw_proxy>)>();

  /// Get the marshal functions for the proxy
  ffi.Pointer<pw_protocol_marshal> pw_proxy_get_marshal(
    ffi.Pointer<pw_proxy> proxy,
  ) {
    return _pw_proxy_get_marshal(
      proxy,
    );
  }

  late final _pw_proxy_get_marshalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_protocol_marshal> Function(
              ffi.Pointer<pw_proxy>)>>('pw_proxy_get_marshal');
  late final _pw_proxy_get_marshal = _pw_proxy_get_marshalPtr.asFunction<
      ffi.Pointer<pw_protocol_marshal> Function(ffi.Pointer<pw_proxy>)>();

  /// Install a marshal function on a proxy
  int pw_proxy_install_marshal(
    ffi.Pointer<pw_proxy> proxy,
    bool implementor,
  ) {
    return _pw_proxy_install_marshal(
      proxy,
      implementor,
    );
  }

  late final _pw_proxy_install_marshalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pw_proxy>, ffi.Bool)>>('pw_proxy_install_marshal');
  late final _pw_proxy_install_marshal = _pw_proxy_install_marshalPtr
      .asFunction<int Function(ffi.Pointer<pw_proxy>, bool)>();

  /// Update an existing \ref pw_client_info with \a update with reset
  ffi.Pointer<pw_client_info> pw_client_info_update(
    ffi.Pointer<pw_client_info> info,
    ffi.Pointer<pw_client_info> update,
  ) {
    return _pw_client_info_update(
      info,
      update,
    );
  }

  late final _pw_client_info_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_client_info> Function(ffi.Pointer<pw_client_info>,
              ffi.Pointer<pw_client_info>)>>('pw_client_info_update');
  late final _pw_client_info_update = _pw_client_info_updatePtr.asFunction<
      ffi.Pointer<pw_client_info> Function(
          ffi.Pointer<pw_client_info>, ffi.Pointer<pw_client_info>)>();

  /// Merge an existing \ref pw_client_info with \a update
  ffi.Pointer<pw_client_info> pw_client_info_merge(
    ffi.Pointer<pw_client_info> info,
    ffi.Pointer<pw_client_info> update,
    bool reset,
  ) {
    return _pw_client_info_merge(
      info,
      update,
      reset,
    );
  }

  late final _pw_client_info_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_client_info> Function(ffi.Pointer<pw_client_info>,
              ffi.Pointer<pw_client_info>, ffi.Bool)>>('pw_client_info_merge');
  late final _pw_client_info_merge = _pw_client_info_mergePtr.asFunction<
      ffi.Pointer<pw_client_info> Function(
          ffi.Pointer<pw_client_info>, ffi.Pointer<pw_client_info>, bool)>();

  /// Free a \ref pw_client_info
  void pw_client_info_free(
    ffi.Pointer<pw_client_info> info,
  ) {
    return _pw_client_info_free(
      info,
    );
  }

  late final _pw_client_info_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_client_info>)>>(
      'pw_client_info_free');
  late final _pw_client_info_free = _pw_client_info_freePtr
      .asFunction<void Function(ffi.Pointer<pw_client_info>)>();

  /// Update and existing \ref pw_device_info with \a update and reset
  ffi.Pointer<pw_device_info> pw_device_info_update(
    ffi.Pointer<pw_device_info> info,
    ffi.Pointer<pw_device_info> update,
  ) {
    return _pw_device_info_update(
      info,
      update,
    );
  }

  late final _pw_device_info_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_device_info> Function(ffi.Pointer<pw_device_info>,
              ffi.Pointer<pw_device_info>)>>('pw_device_info_update');
  late final _pw_device_info_update = _pw_device_info_updatePtr.asFunction<
      ffi.Pointer<pw_device_info> Function(
          ffi.Pointer<pw_device_info>, ffi.Pointer<pw_device_info>)>();

  /// Merge and existing \ref pw_device_info with \a update
  ffi.Pointer<pw_device_info> pw_device_info_merge(
    ffi.Pointer<pw_device_info> info,
    ffi.Pointer<pw_device_info> update,
    bool reset,
  ) {
    return _pw_device_info_merge(
      info,
      update,
      reset,
    );
  }

  late final _pw_device_info_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_device_info> Function(ffi.Pointer<pw_device_info>,
              ffi.Pointer<pw_device_info>, ffi.Bool)>>('pw_device_info_merge');
  late final _pw_device_info_merge = _pw_device_info_mergePtr.asFunction<
      ffi.Pointer<pw_device_info> Function(
          ffi.Pointer<pw_device_info>, ffi.Pointer<pw_device_info>, bool)>();

  /// Free a \ref pw_device_info
  void pw_device_info_free(
    ffi.Pointer<pw_device_info> info,
  ) {
    return _pw_device_info_free(
      info,
    );
  }

  late final _pw_device_info_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_device_info>)>>(
      'pw_device_info_free');
  late final _pw_device_info_free = _pw_device_info_freePtr
      .asFunction<void Function(ffi.Pointer<pw_device_info>)>();

  /// Create a new memory pool
  ffi.Pointer<pw_mempool> pw_mempool_new(
    ffi.Pointer<pw_properties> props,
  ) {
    return _pw_mempool_new(
      props,
    );
  }

  late final _pw_mempool_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_mempool> Function(
              ffi.Pointer<pw_properties>)>>('pw_mempool_new');
  late final _pw_mempool_new = _pw_mempool_newPtr.asFunction<
      ffi.Pointer<pw_mempool> Function(ffi.Pointer<pw_properties>)>();

  /// Listen for events
  void pw_mempool_add_listener(
    ffi.Pointer<pw_mempool> pool,
    ffi.Pointer<spa_hook> listener,
    ffi.Pointer<pw_mempool_events> events,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _pw_mempool_add_listener(
      pool,
      listener,
      events,
      data,
    );
  }

  late final _pw_mempool_add_listenerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pw_mempool>,
              ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_mempool_events>,
              ffi.Pointer<ffi.Void>)>>('pw_mempool_add_listener');
  late final _pw_mempool_add_listener = _pw_mempool_add_listenerPtr.asFunction<
      void Function(ffi.Pointer<pw_mempool>, ffi.Pointer<spa_hook>,
          ffi.Pointer<pw_mempool_events>, ffi.Pointer<ffi.Void>)>();

  /// Clear a pool
  void pw_mempool_clear(
    ffi.Pointer<pw_mempool> pool,
  ) {
    return _pw_mempool_clear(
      pool,
    );
  }

  late final _pw_mempool_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_mempool>)>>(
          'pw_mempool_clear');
  late final _pw_mempool_clear =
      _pw_mempool_clearPtr.asFunction<void Function(ffi.Pointer<pw_mempool>)>();

  /// Clear and destroy a pool
  void pw_mempool_destroy(
    ffi.Pointer<pw_mempool> pool,
  ) {
    return _pw_mempool_destroy(
      pool,
    );
  }

  late final _pw_mempool_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_mempool>)>>(
          'pw_mempool_destroy');
  late final _pw_mempool_destroy = _pw_mempool_destroyPtr
      .asFunction<void Function(ffi.Pointer<pw_mempool>)>();

  /// Allocate a memory block from the pool
  ffi.Pointer<pw_memblock> pw_mempool_alloc(
    ffi.Pointer<pw_mempool> pool,
    int flags,
    int type,
    int size,
  ) {
    return _pw_mempool_alloc(
      pool,
      flags,
      type,
      size,
    );
  }

  late final _pw_mempool_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_memblock> Function(ffi.Pointer<pw_mempool>, ffi.Int32,
              ffi.Uint32, ffi.Size)>>('pw_mempool_alloc');
  late final _pw_mempool_alloc = _pw_mempool_allocPtr.asFunction<
      ffi.Pointer<pw_memblock> Function(
          ffi.Pointer<pw_mempool>, int, int, int)>();

  /// Import a block from another pool
  ffi.Pointer<pw_memblock> pw_mempool_import_block(
    ffi.Pointer<pw_mempool> pool,
    ffi.Pointer<pw_memblock> mem,
  ) {
    return _pw_mempool_import_block(
      pool,
      mem,
    );
  }

  late final _pw_mempool_import_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_memblock> Function(ffi.Pointer<pw_mempool>,
              ffi.Pointer<pw_memblock>)>>('pw_mempool_import_block');
  late final _pw_mempool_import_block = _pw_mempool_import_blockPtr.asFunction<
      ffi.Pointer<pw_memblock> Function(
          ffi.Pointer<pw_mempool>, ffi.Pointer<pw_memblock>)>();

  /// Import an fd into the pool
  ffi.Pointer<pw_memblock> pw_mempool_import(
    ffi.Pointer<pw_mempool> pool,
    int flags,
    int type,
    int fd,
  ) {
    return _pw_mempool_import(
      pool,
      flags,
      type,
      fd,
    );
  }

  late final _pw_mempool_importPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_memblock> Function(ffi.Pointer<pw_mempool>, ffi.Int32,
              ffi.Uint32, ffi.Int)>>('pw_mempool_import');
  late final _pw_mempool_import = _pw_mempool_importPtr.asFunction<
      ffi.Pointer<pw_memblock> Function(
          ffi.Pointer<pw_mempool>, int, int, int)>();

  /// Free a memblock regardless of the refcount and destroy all mappings
  void pw_memblock_free(
    ffi.Pointer<pw_memblock> mem,
  ) {
    return _pw_memblock_free(
      mem,
    );
  }

  late final _pw_memblock_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_memblock>)>>(
          'pw_memblock_free');
  late final _pw_memblock_free = _pw_memblock_freePtr
      .asFunction<void Function(ffi.Pointer<pw_memblock>)>();

  /// Remove a memblock for given \a id
  int pw_mempool_remove_id(
    ffi.Pointer<pw_mempool> pool,
    int id,
  ) {
    return _pw_mempool_remove_id(
      pool,
      id,
    );
  }

  late final _pw_mempool_remove_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pw_mempool>, ffi.Uint32)>>('pw_mempool_remove_id');
  late final _pw_mempool_remove_id = _pw_mempool_remove_idPtr
      .asFunction<int Function(ffi.Pointer<pw_mempool>, int)>();

  /// Find memblock for given \a ptr
  ffi.Pointer<pw_memblock> pw_mempool_find_ptr(
    ffi.Pointer<pw_mempool> pool,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _pw_mempool_find_ptr(
      pool,
      ptr,
    );
  }

  late final _pw_mempool_find_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_memblock> Function(ffi.Pointer<pw_mempool>,
              ffi.Pointer<ffi.Void>)>>('pw_mempool_find_ptr');
  late final _pw_mempool_find_ptr = _pw_mempool_find_ptrPtr.asFunction<
      ffi.Pointer<pw_memblock> Function(
          ffi.Pointer<pw_mempool>, ffi.Pointer<ffi.Void>)>();

  /// Find memblock for given \a id
  ffi.Pointer<pw_memblock> pw_mempool_find_id(
    ffi.Pointer<pw_mempool> pool,
    int id,
  ) {
    return _pw_mempool_find_id(
      pool,
      id,
    );
  }

  late final _pw_mempool_find_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_memblock> Function(
              ffi.Pointer<pw_mempool>, ffi.Uint32)>>('pw_mempool_find_id');
  late final _pw_mempool_find_id = _pw_mempool_find_idPtr.asFunction<
      ffi.Pointer<pw_memblock> Function(ffi.Pointer<pw_mempool>, int)>();

  /// Find memblock for given \a fd
  ffi.Pointer<pw_memblock> pw_mempool_find_fd(
    ffi.Pointer<pw_mempool> pool,
    int fd,
  ) {
    return _pw_mempool_find_fd(
      pool,
      fd,
    );
  }

  late final _pw_mempool_find_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_memblock> Function(
              ffi.Pointer<pw_mempool>, ffi.Int)>>('pw_mempool_find_fd');
  late final _pw_mempool_find_fd = _pw_mempool_find_fdPtr.asFunction<
      ffi.Pointer<pw_memblock> Function(ffi.Pointer<pw_mempool>, int)>();

  /// Map a region of a memory block
  ffi.Pointer<pw_memmap> pw_memblock_map(
    ffi.Pointer<pw_memblock> block,
    int flags,
    int offset,
    int size,
    ffi.Pointer<ffi.Uint32> tag,
  ) {
    return _pw_memblock_map(
      block,
      flags,
      offset,
      size,
      tag,
    );
  }

  late final _pw_memblock_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_memmap> Function(
              ffi.Pointer<pw_memblock>,
              ffi.Int32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint32>)>>('pw_memblock_map');
  late final _pw_memblock_map = _pw_memblock_mapPtr.asFunction<
      ffi.Pointer<pw_memmap> Function(
          ffi.Pointer<pw_memblock>, int, int, int, ffi.Pointer<ffi.Uint32>)>();

  /// Map a region of a memory block with \a id
  ffi.Pointer<pw_memmap> pw_mempool_map_id(
    ffi.Pointer<pw_mempool> pool,
    int id,
    int flags,
    int offset,
    int size,
    ffi.Pointer<ffi.Uint32> tag,
  ) {
    return _pw_mempool_map_id(
      pool,
      id,
      flags,
      offset,
      size,
      tag,
    );
  }

  late final _pw_mempool_map_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_memmap> Function(
              ffi.Pointer<pw_mempool>,
              ffi.Uint32,
              ffi.Int32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint32>)>>('pw_mempool_map_id');
  late final _pw_mempool_map_id = _pw_mempool_map_idPtr.asFunction<
      ffi.Pointer<pw_memmap> Function(ffi.Pointer<pw_mempool>, int, int, int,
          int, ffi.Pointer<ffi.Uint32>)>();

  ffi.Pointer<pw_memmap> pw_mempool_import_map(
    ffi.Pointer<pw_mempool> pool,
    ffi.Pointer<pw_mempool> other,
    ffi.Pointer<ffi.Void> data,
    int size,
    ffi.Pointer<ffi.Uint32> tag,
  ) {
    return _pw_mempool_import_map(
      pool,
      other,
      data,
      size,
      tag,
    );
  }

  late final _pw_mempool_import_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_memmap> Function(
              ffi.Pointer<pw_mempool>,
              ffi.Pointer<pw_mempool>,
              ffi.Pointer<ffi.Void>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint32>)>>('pw_mempool_import_map');
  late final _pw_mempool_import_map = _pw_mempool_import_mapPtr.asFunction<
      ffi.Pointer<pw_memmap> Function(
          ffi.Pointer<pw_mempool>,
          ffi.Pointer<pw_mempool>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Uint32>)>();

  /// find a map with the given tag
  ffi.Pointer<pw_memmap> pw_mempool_find_tag(
    ffi.Pointer<pw_mempool> pool,
    ffi.Pointer<ffi.Uint32> tag,
    int size,
  ) {
    return _pw_mempool_find_tag(
      pool,
      tag,
      size,
    );
  }

  late final _pw_mempool_find_tagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_memmap> Function(ffi.Pointer<pw_mempool>,
              ffi.Pointer<ffi.Uint32>, ffi.Size)>>('pw_mempool_find_tag');
  late final _pw_mempool_find_tag = _pw_mempool_find_tagPtr.asFunction<
      ffi.Pointer<pw_memmap> Function(
          ffi.Pointer<pw_mempool>, ffi.Pointer<ffi.Uint32>, int)>();

  /// Unmap a region
  int pw_memmap_free(
    ffi.Pointer<pw_memmap> map,
  ) {
    return _pw_memmap_free(
      map,
    );
  }

  late final _pw_memmap_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pw_memmap>)>>(
          'pw_memmap_free');
  late final _pw_memmap_free =
      _pw_memmap_freePtr.asFunction<int Function(ffi.Pointer<pw_memmap>)>();

  int pw_buffers_negotiate(
    ffi.Pointer<pw_context> context,
    int flags,
    ffi.Pointer<spa_node> outnode,
    int out_port_id,
    ffi.Pointer<spa_node> innode,
    int in_port_id,
    ffi.Pointer<pw_buffers> result,
  ) {
    return _pw_buffers_negotiate(
      context,
      flags,
      outnode,
      out_port_id,
      innode,
      in_port_id,
      result,
    );
  }

  late final _pw_buffers_negotiatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pw_context>,
              ffi.Uint32,
              ffi.Pointer<spa_node>,
              ffi.Uint32,
              ffi.Pointer<spa_node>,
              ffi.Uint32,
              ffi.Pointer<pw_buffers>)>>('pw_buffers_negotiate');
  late final _pw_buffers_negotiate = _pw_buffers_negotiatePtr.asFunction<
      int Function(ffi.Pointer<pw_context>, int, ffi.Pointer<spa_node>, int,
          ffi.Pointer<spa_node>, int, ffi.Pointer<pw_buffers>)>();

  void pw_buffers_clear(
    ffi.Pointer<pw_buffers> buffers,
  ) {
    return _pw_buffers_clear(
      buffers,
    );
  }

  late final _pw_buffers_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_buffers>)>>(
          'pw_buffers_clear');
  late final _pw_buffers_clear =
      _pw_buffers_clearPtr.asFunction<void Function(ffi.Pointer<pw_buffers>)>();

  ffi.Pointer<pw_factory_info> pw_factory_info_update(
    ffi.Pointer<pw_factory_info> info,
    ffi.Pointer<pw_factory_info> update,
  ) {
    return _pw_factory_info_update(
      info,
      update,
    );
  }

  late final _pw_factory_info_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_factory_info> Function(ffi.Pointer<pw_factory_info>,
              ffi.Pointer<pw_factory_info>)>>('pw_factory_info_update');
  late final _pw_factory_info_update = _pw_factory_info_updatePtr.asFunction<
      ffi.Pointer<pw_factory_info> Function(
          ffi.Pointer<pw_factory_info>, ffi.Pointer<pw_factory_info>)>();

  ffi.Pointer<pw_factory_info> pw_factory_info_merge(
    ffi.Pointer<pw_factory_info> info,
    ffi.Pointer<pw_factory_info> update,
    bool reset,
  ) {
    return _pw_factory_info_merge(
      info,
      update,
      reset,
    );
  }

  late final _pw_factory_info_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_factory_info> Function(
              ffi.Pointer<pw_factory_info>,
              ffi.Pointer<pw_factory_info>,
              ffi.Bool)>>('pw_factory_info_merge');
  late final _pw_factory_info_merge = _pw_factory_info_mergePtr.asFunction<
      ffi.Pointer<pw_factory_info> Function(
          ffi.Pointer<pw_factory_info>, ffi.Pointer<pw_factory_info>, bool)>();

  void pw_factory_info_free(
    ffi.Pointer<pw_factory_info> info,
  ) {
    return _pw_factory_info_free(
      info,
    );
  }

  late final _pw_factory_info_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_factory_info>)>>(
      'pw_factory_info_free');
  late final _pw_factory_info_free = _pw_factory_info_freePtr
      .asFunction<void Function(ffi.Pointer<pw_factory_info>)>();

  /// \addtogroup pw_log
  /// \{
  /// /
  /// /** The global log level
  late final ffi.Pointer<ffi.Int32> _pw_log_level =
      _lookup<ffi.Int32>('pw_log_level');

  int get pw_log_level => _pw_log_level.value;

  set pw_log_level(int value) => _pw_log_level.value = value;

  late final ffi.Pointer<ffi.Pointer<spa_log_topic>> _PW_LOG_TOPIC_DEFAULT =
      _lookup<ffi.Pointer<spa_log_topic>>('PW_LOG_TOPIC_DEFAULT');

  ffi.Pointer<spa_log_topic> get PW_LOG_TOPIC_DEFAULT =>
      _PW_LOG_TOPIC_DEFAULT.value;

  set PW_LOG_TOPIC_DEFAULT(ffi.Pointer<spa_log_topic> value) =>
      _PW_LOG_TOPIC_DEFAULT.value = value;

  /// Configure a logging module. This is usually done automatically
  /// in pw_init() but you can install a custom logger before calling
  /// pw_init().
  void pw_log_set(
    ffi.Pointer<spa_log> log,
  ) {
    return _pw_log_set(
      log,
    );
  }

  late final _pw_log_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<spa_log>)>>(
          'pw_log_set');
  late final _pw_log_set =
      _pw_log_setPtr.asFunction<void Function(ffi.Pointer<spa_log>)>();

  /// Get the log interface
  ffi.Pointer<spa_log> pw_log_get() {
    return _pw_log_get();
  }

  late final _pw_log_getPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<spa_log> Function()>>(
          'pw_log_get');
  late final _pw_log_get =
      _pw_log_getPtr.asFunction<ffi.Pointer<spa_log> Function()>();

  /// Configure the logging level
  void pw_log_set_level(
    int level,
  ) {
    return _pw_log_set_level(
      level,
    );
  }

  late final _pw_log_set_levelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'pw_log_set_level');
  late final _pw_log_set_level =
      _pw_log_set_levelPtr.asFunction<void Function(int)>();

  /// Log a message for a topic
  void pw_log_logt(
    int level,
    ffi.Pointer<spa_log_topic> topic,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _pw_log_logt(
      level,
      topic,
      file,
      line,
      func,
      fmt,
    );
  }

  late final _pw_log_logtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Pointer<spa_log_topic>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('pw_log_logt');
  late final _pw_log_logt = _pw_log_logtPtr.asFunction<
      void Function(int, ffi.Pointer<spa_log_topic>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Log a message for a topic
  void pw_log_logtv(
    int level,
    ffi.Pointer<spa_log_topic> topic,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
    ffi.Pointer<ffi.Char> fmt,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _pw_log_logtv(
      level,
      topic,
      file,
      line,
      func,
      fmt,
      args,
    );
  }

  late final _pw_log_logtvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Pointer<spa_log_topic>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('pw_log_logtv');
  late final _pw_log_logtv = _pw_log_logtvPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<spa_log_topic>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  /// Log a message for the default topic
  void pw_log_log(
    int level,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _pw_log_log(
      level,
      file,
      line,
      func,
      fmt,
    );
  }

  late final _pw_log_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('pw_log_log');
  late final _pw_log_log = _pw_log_logPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// Log a message for the default topic
  void pw_log_logv(
    int level,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
    ffi.Pointer<ffi.Char> fmt,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _pw_log_logv(
      level,
      file,
      line,
      func,
      fmt,
      args,
    );
  }

  late final _pw_log_logvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('pw_log_logv');
  late final _pw_log_logv = _pw_log_logvPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  /// Convert a \ref pw_link_state to a readable string
  ffi.Pointer<ffi.Char> pw_link_state_as_string(
    int state,
  ) {
    return _pw_link_state_as_string(
      state,
    );
  }

  late final _pw_link_state_as_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'pw_link_state_as_string');
  late final _pw_link_state_as_string = _pw_link_state_as_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<pw_link_info> pw_link_info_update(
    ffi.Pointer<pw_link_info> info,
    ffi.Pointer<pw_link_info> update,
  ) {
    return _pw_link_info_update(
      info,
      update,
    );
  }

  late final _pw_link_info_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_link_info> Function(ffi.Pointer<pw_link_info>,
              ffi.Pointer<pw_link_info>)>>('pw_link_info_update');
  late final _pw_link_info_update = _pw_link_info_updatePtr.asFunction<
      ffi.Pointer<pw_link_info> Function(
          ffi.Pointer<pw_link_info>, ffi.Pointer<pw_link_info>)>();

  ffi.Pointer<pw_link_info> pw_link_info_merge(
    ffi.Pointer<pw_link_info> info,
    ffi.Pointer<pw_link_info> update,
    bool reset,
  ) {
    return _pw_link_info_merge(
      info,
      update,
      reset,
    );
  }

  late final _pw_link_info_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_link_info> Function(ffi.Pointer<pw_link_info>,
              ffi.Pointer<pw_link_info>, ffi.Bool)>>('pw_link_info_merge');
  late final _pw_link_info_merge = _pw_link_info_mergePtr.asFunction<
      ffi.Pointer<pw_link_info> Function(
          ffi.Pointer<pw_link_info>, ffi.Pointer<pw_link_info>, bool)>();

  void pw_link_info_free(
    ffi.Pointer<pw_link_info> info,
  ) {
    return _pw_link_info_free(
      info,
    );
  }

  late final _pw_link_info_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_link_info>)>>(
          'pw_link_info_free');
  late final _pw_link_info_free = _pw_link_info_freePtr
      .asFunction<void Function(ffi.Pointer<pw_link_info>)>();

  /// Create a new main loop.
  ffi.Pointer<pw_main_loop> pw_main_loop_new(
    ffi.Pointer<spa_dict> props,
  ) {
    return _pw_main_loop_new(
      props,
    );
  }

  late final _pw_main_loop_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_main_loop> Function(
              ffi.Pointer<spa_dict>)>>('pw_main_loop_new');
  late final _pw_main_loop_new = _pw_main_loop_newPtr
      .asFunction<ffi.Pointer<pw_main_loop> Function(ffi.Pointer<spa_dict>)>();

  /// Add an event listener
  void pw_main_loop_add_listener(
    ffi.Pointer<pw_main_loop> loop,
    ffi.Pointer<spa_hook> listener,
    ffi.Pointer<pw_main_loop_events> events,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _pw_main_loop_add_listener(
      loop,
      listener,
      events,
      data,
    );
  }

  late final _pw_main_loop_add_listenerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pw_main_loop>,
              ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_main_loop_events>,
              ffi.Pointer<ffi.Void>)>>('pw_main_loop_add_listener');
  late final _pw_main_loop_add_listener =
      _pw_main_loop_add_listenerPtr.asFunction<
          void Function(ffi.Pointer<pw_main_loop>, ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_main_loop_events>, ffi.Pointer<ffi.Void>)>();

  /// Get the loop implementation
  ffi.Pointer<pw_loop> pw_main_loop_get_loop(
    ffi.Pointer<pw_main_loop> loop,
  ) {
    return _pw_main_loop_get_loop(
      loop,
    );
  }

  late final _pw_main_loop_get_loopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_loop> Function(
              ffi.Pointer<pw_main_loop>)>>('pw_main_loop_get_loop');
  late final _pw_main_loop_get_loop = _pw_main_loop_get_loopPtr
      .asFunction<ffi.Pointer<pw_loop> Function(ffi.Pointer<pw_main_loop>)>();

  /// Destroy a loop
  void pw_main_loop_destroy(
    ffi.Pointer<pw_main_loop> loop,
  ) {
    return _pw_main_loop_destroy(
      loop,
    );
  }

  late final _pw_main_loop_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_main_loop>)>>(
          'pw_main_loop_destroy');
  late final _pw_main_loop_destroy = _pw_main_loop_destroyPtr
      .asFunction<void Function(ffi.Pointer<pw_main_loop>)>();

  /// Run a main loop. This blocks until \ref pw_main_loop_quit is called
  int pw_main_loop_run(
    ffi.Pointer<pw_main_loop> loop,
  ) {
    return _pw_main_loop_run(
      loop,
    );
  }

  late final _pw_main_loop_runPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pw_main_loop>)>>(
          'pw_main_loop_run');
  late final _pw_main_loop_run = _pw_main_loop_runPtr
      .asFunction<int Function(ffi.Pointer<pw_main_loop>)>();

  /// Quit a main loop
  int pw_main_loop_quit(
    ffi.Pointer<pw_main_loop> loop,
  ) {
    return _pw_main_loop_quit(
      loop,
    );
  }

  late final _pw_main_loop_quitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pw_main_loop>)>>(
          'pw_main_loop_quit');
  late final _pw_main_loop_quit = _pw_main_loop_quitPtr
      .asFunction<int Function(ffi.Pointer<pw_main_loop>)>();

  /// Update and existing \ref pw_module_info with \a update with reset
  ffi.Pointer<pw_module_info> pw_module_info_update(
    ffi.Pointer<pw_module_info> info,
    ffi.Pointer<pw_module_info> update,
  ) {
    return _pw_module_info_update(
      info,
      update,
    );
  }

  late final _pw_module_info_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_module_info> Function(ffi.Pointer<pw_module_info>,
              ffi.Pointer<pw_module_info>)>>('pw_module_info_update');
  late final _pw_module_info_update = _pw_module_info_updatePtr.asFunction<
      ffi.Pointer<pw_module_info> Function(
          ffi.Pointer<pw_module_info>, ffi.Pointer<pw_module_info>)>();

  /// Merge and existing \ref pw_module_info with \a update
  ffi.Pointer<pw_module_info> pw_module_info_merge(
    ffi.Pointer<pw_module_info> info,
    ffi.Pointer<pw_module_info> update,
    bool reset,
  ) {
    return _pw_module_info_merge(
      info,
      update,
      reset,
    );
  }

  late final _pw_module_info_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_module_info> Function(ffi.Pointer<pw_module_info>,
              ffi.Pointer<pw_module_info>, ffi.Bool)>>('pw_module_info_merge');
  late final _pw_module_info_merge = _pw_module_info_mergePtr.asFunction<
      ffi.Pointer<pw_module_info> Function(
          ffi.Pointer<pw_module_info>, ffi.Pointer<pw_module_info>, bool)>();

  /// Free a \ref pw_module_info
  void pw_module_info_free(
    ffi.Pointer<pw_module_info> info,
  ) {
    return _pw_module_info_free(
      info,
    );
  }

  late final _pw_module_info_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_module_info>)>>(
      'pw_module_info_free');
  late final _pw_module_info_free = _pw_module_info_freePtr
      .asFunction<void Function(ffi.Pointer<pw_module_info>)>();

  /// Convert a \ref pw_node_state to a readable string
  ffi.Pointer<ffi.Char> pw_node_state_as_string(
    int state,
  ) {
    return _pw_node_state_as_string(
      state,
    );
  }

  late final _pw_node_state_as_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'pw_node_state_as_string');
  late final _pw_node_state_as_string = _pw_node_state_as_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<pw_node_info> pw_node_info_update(
    ffi.Pointer<pw_node_info> info,
    ffi.Pointer<pw_node_info> update,
  ) {
    return _pw_node_info_update(
      info,
      update,
    );
  }

  late final _pw_node_info_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_node_info> Function(ffi.Pointer<pw_node_info>,
              ffi.Pointer<pw_node_info>)>>('pw_node_info_update');
  late final _pw_node_info_update = _pw_node_info_updatePtr.asFunction<
      ffi.Pointer<pw_node_info> Function(
          ffi.Pointer<pw_node_info>, ffi.Pointer<pw_node_info>)>();

  ffi.Pointer<pw_node_info> pw_node_info_merge(
    ffi.Pointer<pw_node_info> info,
    ffi.Pointer<pw_node_info> update,
    bool reset,
  ) {
    return _pw_node_info_merge(
      info,
      update,
      reset,
    );
  }

  late final _pw_node_info_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_node_info> Function(ffi.Pointer<pw_node_info>,
              ffi.Pointer<pw_node_info>, ffi.Bool)>>('pw_node_info_merge');
  late final _pw_node_info_merge = _pw_node_info_mergePtr.asFunction<
      ffi.Pointer<pw_node_info> Function(
          ffi.Pointer<pw_node_info>, ffi.Pointer<pw_node_info>, bool)>();

  void pw_node_info_free(
    ffi.Pointer<pw_node_info> info,
  ) {
    return _pw_node_info_free(
      info,
    );
  }

  late final _pw_node_info_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_node_info>)>>(
          'pw_node_info_free');
  late final _pw_node_info_free = _pw_node_info_freePtr
      .asFunction<void Function(ffi.Pointer<pw_node_info>)>();

  /// Convert a \ref pw_direction to a readable string
  ffi.Pointer<ffi.Char> pw_direction_as_string(
    int direction,
  ) {
    return _pw_direction_as_string(
      direction,
    );
  }

  late final _pw_direction_as_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'pw_direction_as_string');
  late final _pw_direction_as_string = _pw_direction_as_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<pw_port_info> pw_port_info_update(
    ffi.Pointer<pw_port_info> info,
    ffi.Pointer<pw_port_info> update,
  ) {
    return _pw_port_info_update(
      info,
      update,
    );
  }

  late final _pw_port_info_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_port_info> Function(ffi.Pointer<pw_port_info>,
              ffi.Pointer<pw_port_info>)>>('pw_port_info_update');
  late final _pw_port_info_update = _pw_port_info_updatePtr.asFunction<
      ffi.Pointer<pw_port_info> Function(
          ffi.Pointer<pw_port_info>, ffi.Pointer<pw_port_info>)>();

  ffi.Pointer<pw_port_info> pw_port_info_merge(
    ffi.Pointer<pw_port_info> info,
    ffi.Pointer<pw_port_info> update,
    bool reset,
  ) {
    return _pw_port_info_merge(
      info,
      update,
      reset,
    );
  }

  late final _pw_port_info_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_port_info> Function(ffi.Pointer<pw_port_info>,
              ffi.Pointer<pw_port_info>, ffi.Bool)>>('pw_port_info_merge');
  late final _pw_port_info_merge = _pw_port_info_mergePtr.asFunction<
      ffi.Pointer<pw_port_info> Function(
          ffi.Pointer<pw_port_info>, ffi.Pointer<pw_port_info>, bool)>();

  void pw_port_info_free(
    ffi.Pointer<pw_port_info> info,
  ) {
    return _pw_port_info_free(
      info,
    );
  }

  late final _pw_port_info_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_port_info>)>>(
          'pw_port_info_free');
  late final _pw_port_info_free = _pw_port_info_freePtr
      .asFunction<void Function(ffi.Pointer<pw_port_info>)>();

  /// Convert a stream state to a readable string
  ffi.Pointer<ffi.Char> pw_stream_state_as_string(
    int state,
  ) {
    return _pw_stream_state_as_string(
      state,
    );
  }

  late final _pw_stream_state_as_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'pw_stream_state_as_string');
  late final _pw_stream_state_as_string = _pw_stream_state_as_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// Create a new unconneced \ref pw_stream
  /// \return a newly allocated \ref pw_stream
  ffi.Pointer<pw_stream> pw_stream_new(
    ffi.Pointer<pw_core> core,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<pw_properties> props,
  ) {
    return _pw_stream_new(
      core,
      name,
      props,
    );
  }

  late final _pw_stream_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_stream> Function(
              ffi.Pointer<pw_core>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pw_properties>)>>('pw_stream_new');
  late final _pw_stream_new = _pw_stream_newPtr.asFunction<
      ffi.Pointer<pw_stream> Function(ffi.Pointer<pw_core>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<pw_properties>)>();

  ffi.Pointer<pw_stream> pw_stream_new_simple(
    ffi.Pointer<pw_loop> loop,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<pw_properties> props,
    ffi.Pointer<pw_stream_events> events,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _pw_stream_new_simple(
      loop,
      name,
      props,
      events,
      data,
    );
  }

  late final _pw_stream_new_simplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_stream> Function(
              ffi.Pointer<pw_loop>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pw_properties>,
              ffi.Pointer<pw_stream_events>,
              ffi.Pointer<ffi.Void>)>>('pw_stream_new_simple');
  late final _pw_stream_new_simple = _pw_stream_new_simplePtr.asFunction<
      ffi.Pointer<pw_stream> Function(
          ffi.Pointer<pw_loop>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<pw_properties>,
          ffi.Pointer<pw_stream_events>,
          ffi.Pointer<ffi.Void>)>();

  /// Destroy a stream
  void pw_stream_destroy(
    ffi.Pointer<pw_stream> stream,
  ) {
    return _pw_stream_destroy(
      stream,
    );
  }

  late final _pw_stream_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_stream>)>>(
          'pw_stream_destroy');
  late final _pw_stream_destroy =
      _pw_stream_destroyPtr.asFunction<void Function(ffi.Pointer<pw_stream>)>();

  void pw_stream_add_listener(
    ffi.Pointer<pw_stream> stream,
    ffi.Pointer<spa_hook> listener,
    ffi.Pointer<pw_stream_events> events,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _pw_stream_add_listener(
      stream,
      listener,
      events,
      data,
    );
  }

  late final _pw_stream_add_listenerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pw_stream>,
              ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_stream_events>,
              ffi.Pointer<ffi.Void>)>>('pw_stream_add_listener');
  late final _pw_stream_add_listener = _pw_stream_add_listenerPtr.asFunction<
      void Function(ffi.Pointer<pw_stream>, ffi.Pointer<spa_hook>,
          ffi.Pointer<pw_stream_events>, ffi.Pointer<ffi.Void>)>();

  int pw_stream_get_state(
    ffi.Pointer<pw_stream> stream,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error,
  ) {
    return _pw_stream_get_state(
      stream,
      error,
    );
  }

  late final _pw_stream_get_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pw_stream>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('pw_stream_get_state');
  late final _pw_stream_get_state = _pw_stream_get_statePtr.asFunction<
      int Function(
          ffi.Pointer<pw_stream>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> pw_stream_get_name(
    ffi.Pointer<pw_stream> stream,
  ) {
    return _pw_stream_get_name(
      stream,
    );
  }

  late final _pw_stream_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pw_stream>)>>('pw_stream_get_name');
  late final _pw_stream_get_name = _pw_stream_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<pw_stream>)>();

  ffi.Pointer<pw_core> pw_stream_get_core(
    ffi.Pointer<pw_stream> stream,
  ) {
    return _pw_stream_get_core(
      stream,
    );
  }

  late final _pw_stream_get_corePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_core> Function(
              ffi.Pointer<pw_stream>)>>('pw_stream_get_core');
  late final _pw_stream_get_core = _pw_stream_get_corePtr
      .asFunction<ffi.Pointer<pw_core> Function(ffi.Pointer<pw_stream>)>();

  ffi.Pointer<pw_properties> pw_stream_get_properties(
    ffi.Pointer<pw_stream> stream,
  ) {
    return _pw_stream_get_properties(
      stream,
    );
  }

  late final _pw_stream_get_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_properties> Function(
              ffi.Pointer<pw_stream>)>>('pw_stream_get_properties');
  late final _pw_stream_get_properties =
      _pw_stream_get_propertiesPtr.asFunction<
          ffi.Pointer<pw_properties> Function(ffi.Pointer<pw_stream>)>();

  int pw_stream_update_properties(
    ffi.Pointer<pw_stream> stream,
    ffi.Pointer<spa_dict> dict,
  ) {
    return _pw_stream_update_properties(
      stream,
      dict,
    );
  }

  late final _pw_stream_update_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_stream>,
              ffi.Pointer<spa_dict>)>>('pw_stream_update_properties');
  late final _pw_stream_update_properties =
      _pw_stream_update_propertiesPtr.asFunction<
          int Function(ffi.Pointer<pw_stream>, ffi.Pointer<spa_dict>)>();

  /// Connect a stream for input or output on \a port_path.
  /// \return 0 on success < 0 on error.
  ///
  /// You should connect to the process event and use pw_stream_dequeue_buffer()
  /// to get the latest metadata and data.
  int pw_stream_connect(
    ffi.Pointer<pw_stream> stream,
    int direction,
    int target_id,
    int flags,
    ffi.Pointer<ffi.Pointer<spa_pod>> params,
    int n_params,
  ) {
    return _pw_stream_connect(
      stream,
      direction,
      target_id,
      flags,
      params,
      n_params,
    );
  }

  late final _pw_stream_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pw_stream>,
              ffi.Int32,
              ffi.Uint32,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<spa_pod>>,
              ffi.Uint32)>>('pw_stream_connect');
  late final _pw_stream_connect = _pw_stream_connectPtr.asFunction<
      int Function(ffi.Pointer<pw_stream>, int, int, int,
          ffi.Pointer<ffi.Pointer<spa_pod>>, int)>();

  /// Get the node ID of the stream.
  /// \return node ID.
  int pw_stream_get_node_id(
    ffi.Pointer<pw_stream> stream,
  ) {
    return _pw_stream_get_node_id(
      stream,
    );
  }

  late final _pw_stream_get_node_idPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<pw_stream>)>>(
          'pw_stream_get_node_id');
  late final _pw_stream_get_node_id = _pw_stream_get_node_idPtr
      .asFunction<int Function(ffi.Pointer<pw_stream>)>();

  /// Disconnect \a stream
  int pw_stream_disconnect(
    ffi.Pointer<pw_stream> stream,
  ) {
    return _pw_stream_disconnect(
      stream,
    );
  }

  late final _pw_stream_disconnectPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pw_stream>)>>(
          'pw_stream_disconnect');
  late final _pw_stream_disconnect = _pw_stream_disconnectPtr
      .asFunction<int Function(ffi.Pointer<pw_stream>)>();

  /// Set the stream in error state
  int pw_stream_set_error(
    ffi.Pointer<pw_stream> stream,
    int res,
    ffi.Pointer<ffi.Char> error,
  ) {
    return _pw_stream_set_error(
      stream,
      res,
      error,
    );
  }

  late final _pw_stream_set_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_stream>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('pw_stream_set_error');
  late final _pw_stream_set_error = _pw_stream_set_errorPtr.asFunction<
      int Function(ffi.Pointer<pw_stream>, int, ffi.Pointer<ffi.Char>)>();

  /// Complete the negotiation process with result code \a res
  ///
  /// This function should be called after notification of the format.
  ///
  /// When \a res indicates success, \a params contain the parameters for the
  /// allocation state.
  int pw_stream_update_params(
    ffi.Pointer<pw_stream> stream,
    ffi.Pointer<ffi.Pointer<spa_pod>> params,
    int n_params,
  ) {
    return _pw_stream_update_params(
      stream,
      params,
      n_params,
    );
  }

  late final _pw_stream_update_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pw_stream>,
              ffi.Pointer<ffi.Pointer<spa_pod>>,
              ffi.Uint32)>>('pw_stream_update_params');
  late final _pw_stream_update_params = _pw_stream_update_paramsPtr.asFunction<
      int Function(
          ffi.Pointer<pw_stream>, ffi.Pointer<ffi.Pointer<spa_pod>>, int)>();

  /// Get control values
  ffi.Pointer<pw_stream_control> pw_stream_get_control(
    ffi.Pointer<pw_stream> stream,
    int id,
  ) {
    return _pw_stream_get_control(
      stream,
      id,
    );
  }

  late final _pw_stream_get_controlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_stream_control> Function(
              ffi.Pointer<pw_stream>, ffi.Uint32)>>('pw_stream_get_control');
  late final _pw_stream_get_control = _pw_stream_get_controlPtr.asFunction<
      ffi.Pointer<pw_stream_control> Function(ffi.Pointer<pw_stream>, int)>();

  /// Set control values
  int pw_stream_set_control(
    ffi.Pointer<pw_stream> stream,
    int id,
    int n_values,
    ffi.Pointer<ffi.Float> values,
  ) {
    return _pw_stream_set_control(
      stream,
      id,
      n_values,
      values,
    );
  }

  late final _pw_stream_set_controlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_stream>, ffi.Uint32, ffi.Uint32,
              ffi.Pointer<ffi.Float>)>>('pw_stream_set_control');
  late final _pw_stream_set_control = _pw_stream_set_controlPtr.asFunction<
      int Function(ffi.Pointer<pw_stream>, int, int, ffi.Pointer<ffi.Float>)>();

  /// Query the time on the stream
  int pw_stream_get_time(
    ffi.Pointer<pw_stream> stream,
    ffi.Pointer<pw_time> time,
  ) {
    return _pw_stream_get_time(
      stream,
      time,
    );
  }

  late final _pw_stream_get_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_stream>,
              ffi.Pointer<pw_time>)>>('pw_stream_get_time');
  late final _pw_stream_get_time = _pw_stream_get_timePtr
      .asFunction<int Function(ffi.Pointer<pw_stream>, ffi.Pointer<pw_time>)>();

  /// Get a buffer that can be filled for playback streams or consumed
  /// for capture streams.
  ffi.Pointer<pw_buffer> pw_stream_dequeue_buffer(
    ffi.Pointer<pw_stream> stream,
  ) {
    return _pw_stream_dequeue_buffer(
      stream,
    );
  }

  late final _pw_stream_dequeue_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_buffer> Function(
              ffi.Pointer<pw_stream>)>>('pw_stream_dequeue_buffer');
  late final _pw_stream_dequeue_buffer = _pw_stream_dequeue_bufferPtr
      .asFunction<ffi.Pointer<pw_buffer> Function(ffi.Pointer<pw_stream>)>();

  /// Submit a buffer for playback or recycle a buffer for capture.
  int pw_stream_queue_buffer(
    ffi.Pointer<pw_stream> stream,
    ffi.Pointer<pw_buffer> buffer,
  ) {
    return _pw_stream_queue_buffer(
      stream,
      buffer,
    );
  }

  late final _pw_stream_queue_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_stream>,
              ffi.Pointer<pw_buffer>)>>('pw_stream_queue_buffer');
  late final _pw_stream_queue_buffer = _pw_stream_queue_bufferPtr.asFunction<
      int Function(ffi.Pointer<pw_stream>, ffi.Pointer<pw_buffer>)>();

  /// Activate or deactivate the stream
  int pw_stream_set_active(
    ffi.Pointer<pw_stream> stream,
    bool active,
  ) {
    return _pw_stream_set_active(
      stream,
      active,
    );
  }

  late final _pw_stream_set_activePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pw_stream>, ffi.Bool)>>('pw_stream_set_active');
  late final _pw_stream_set_active = _pw_stream_set_activePtr
      .asFunction<int Function(ffi.Pointer<pw_stream>, bool)>();

  /// Flush a stream. When \a drain is true, the drained callback will
  /// be called when all data is played or recorded
  int pw_stream_flush(
    ffi.Pointer<pw_stream> stream,
    bool drain,
  ) {
    return _pw_stream_flush(
      stream,
      drain,
    );
  }

  late final _pw_stream_flushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pw_stream>, ffi.Bool)>>('pw_stream_flush');
  late final _pw_stream_flush = _pw_stream_flushPtr
      .asFunction<int Function(ffi.Pointer<pw_stream>, bool)>();

  /// Check if the stream is driving. The stream needs to have the
  /// PW_STREAM_FLAG_DRIVER set. When the stream is driving,
  /// pw_stream_trigger_process() needs to be called when data is
  /// available (output) or needed (input). Since 0.3.34
  bool pw_stream_is_driving(
    ffi.Pointer<pw_stream> stream,
  ) {
    return _pw_stream_is_driving(
      stream,
    );
  }

  late final _pw_stream_is_drivingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<pw_stream>)>>(
          'pw_stream_is_driving');
  late final _pw_stream_is_driving = _pw_stream_is_drivingPtr
      .asFunction<bool Function(ffi.Pointer<pw_stream>)>();

  /// Trigger a push/pull on the stream. One iteration of the graph will
  /// scheduled and process() will be called. Since 0.3.34
  int pw_stream_trigger_process(
    ffi.Pointer<pw_stream> stream,
  ) {
    return _pw_stream_trigger_process(
      stream,
    );
  }

  late final _pw_stream_trigger_processPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pw_stream>)>>(
          'pw_stream_trigger_process');
  late final _pw_stream_trigger_process = _pw_stream_trigger_processPtr
      .asFunction<int Function(ffi.Pointer<pw_stream>)>();

  /// Convert a filter state to a readable string
  ffi.Pointer<ffi.Char> pw_filter_state_as_string(
    int state,
  ) {
    return _pw_filter_state_as_string(
      state,
    );
  }

  late final _pw_filter_state_as_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'pw_filter_state_as_string');
  late final _pw_filter_state_as_string = _pw_filter_state_as_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// Create a new unconneced \ref pw_filter
  /// \return a newly allocated \ref pw_filter
  ffi.Pointer<pw_filter> pw_filter_new(
    ffi.Pointer<pw_core> core,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<pw_properties> props,
  ) {
    return _pw_filter_new(
      core,
      name,
      props,
    );
  }

  late final _pw_filter_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_filter> Function(
              ffi.Pointer<pw_core>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pw_properties>)>>('pw_filter_new');
  late final _pw_filter_new = _pw_filter_newPtr.asFunction<
      ffi.Pointer<pw_filter> Function(ffi.Pointer<pw_core>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<pw_properties>)>();

  ffi.Pointer<pw_filter> pw_filter_new_simple(
    ffi.Pointer<pw_loop> loop,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<pw_properties> props,
    ffi.Pointer<pw_filter_events> events,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _pw_filter_new_simple(
      loop,
      name,
      props,
      events,
      data,
    );
  }

  late final _pw_filter_new_simplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_filter> Function(
              ffi.Pointer<pw_loop>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pw_properties>,
              ffi.Pointer<pw_filter_events>,
              ffi.Pointer<ffi.Void>)>>('pw_filter_new_simple');
  late final _pw_filter_new_simple = _pw_filter_new_simplePtr.asFunction<
      ffi.Pointer<pw_filter> Function(
          ffi.Pointer<pw_loop>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<pw_properties>,
          ffi.Pointer<pw_filter_events>,
          ffi.Pointer<ffi.Void>)>();

  /// Destroy a filter
  void pw_filter_destroy(
    ffi.Pointer<pw_filter> filter,
  ) {
    return _pw_filter_destroy(
      filter,
    );
  }

  late final _pw_filter_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_filter>)>>(
          'pw_filter_destroy');
  late final _pw_filter_destroy =
      _pw_filter_destroyPtr.asFunction<void Function(ffi.Pointer<pw_filter>)>();

  void pw_filter_add_listener(
    ffi.Pointer<pw_filter> filter,
    ffi.Pointer<spa_hook> listener,
    ffi.Pointer<pw_filter_events> events,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _pw_filter_add_listener(
      filter,
      listener,
      events,
      data,
    );
  }

  late final _pw_filter_add_listenerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pw_filter>,
              ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_filter_events>,
              ffi.Pointer<ffi.Void>)>>('pw_filter_add_listener');
  late final _pw_filter_add_listener = _pw_filter_add_listenerPtr.asFunction<
      void Function(ffi.Pointer<pw_filter>, ffi.Pointer<spa_hook>,
          ffi.Pointer<pw_filter_events>, ffi.Pointer<ffi.Void>)>();

  int pw_filter_get_state(
    ffi.Pointer<pw_filter> filter,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error,
  ) {
    return _pw_filter_get_state(
      filter,
      error,
    );
  }

  late final _pw_filter_get_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pw_filter>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('pw_filter_get_state');
  late final _pw_filter_get_state = _pw_filter_get_statePtr.asFunction<
      int Function(
          ffi.Pointer<pw_filter>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> pw_filter_get_name(
    ffi.Pointer<pw_filter> filter,
  ) {
    return _pw_filter_get_name(
      filter,
    );
  }

  late final _pw_filter_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pw_filter>)>>('pw_filter_get_name');
  late final _pw_filter_get_name = _pw_filter_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<pw_filter>)>();

  ffi.Pointer<pw_core> pw_filter_get_core(
    ffi.Pointer<pw_filter> filter,
  ) {
    return _pw_filter_get_core(
      filter,
    );
  }

  late final _pw_filter_get_corePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_core> Function(
              ffi.Pointer<pw_filter>)>>('pw_filter_get_core');
  late final _pw_filter_get_core = _pw_filter_get_corePtr
      .asFunction<ffi.Pointer<pw_core> Function(ffi.Pointer<pw_filter>)>();

  /// Connect a filter for processing.
  /// \return 0 on success < 0 on error.
  ///
  /// You should connect to the process event and use pw_filter_dequeue_buffer()
  /// to get the latest metadata and data.
  int pw_filter_connect(
    ffi.Pointer<pw_filter> filter,
    int flags,
    ffi.Pointer<ffi.Pointer<spa_pod>> params,
    int n_params,
  ) {
    return _pw_filter_connect(
      filter,
      flags,
      params,
      n_params,
    );
  }

  late final _pw_filter_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pw_filter>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<spa_pod>>,
              ffi.Uint32)>>('pw_filter_connect');
  late final _pw_filter_connect = _pw_filter_connectPtr.asFunction<
      int Function(ffi.Pointer<pw_filter>, int,
          ffi.Pointer<ffi.Pointer<spa_pod>>, int)>();

  /// Get the node ID of the filter.
  /// \return node ID.
  int pw_filter_get_node_id(
    ffi.Pointer<pw_filter> filter,
  ) {
    return _pw_filter_get_node_id(
      filter,
    );
  }

  late final _pw_filter_get_node_idPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<pw_filter>)>>(
          'pw_filter_get_node_id');
  late final _pw_filter_get_node_id = _pw_filter_get_node_idPtr
      .asFunction<int Function(ffi.Pointer<pw_filter>)>();

  /// Disconnect \a filter
  int pw_filter_disconnect(
    ffi.Pointer<pw_filter> filter,
  ) {
    return _pw_filter_disconnect(
      filter,
    );
  }

  late final _pw_filter_disconnectPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pw_filter>)>>(
          'pw_filter_disconnect');
  late final _pw_filter_disconnect = _pw_filter_disconnectPtr
      .asFunction<int Function(ffi.Pointer<pw_filter>)>();

  /// add a port to the filter, returns user data of port_data_size.
  ffi.Pointer<ffi.Void> pw_filter_add_port(
    ffi.Pointer<pw_filter> filter,
    int direction,
    int flags,
    int port_data_size,
    ffi.Pointer<pw_properties> props,
    ffi.Pointer<ffi.Pointer<spa_pod>> params,
    int n_params,
  ) {
    return _pw_filter_add_port(
      filter,
      direction,
      flags,
      port_data_size,
      props,
      params,
      n_params,
    );
  }

  late final _pw_filter_add_portPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<pw_filter>,
              ffi.Int32,
              ffi.Int32,
              ffi.Size,
              ffi.Pointer<pw_properties>,
              ffi.Pointer<ffi.Pointer<spa_pod>>,
              ffi.Uint32)>>('pw_filter_add_port');
  late final _pw_filter_add_port = _pw_filter_add_portPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<pw_filter>,
          int,
          int,
          int,
          ffi.Pointer<pw_properties>,
          ffi.Pointer<ffi.Pointer<spa_pod>>,
          int)>();

  /// remove a port from the filter
  int pw_filter_remove_port(
    ffi.Pointer<ffi.Void> port_data,
  ) {
    return _pw_filter_remove_port(
      port_data,
    );
  }

  late final _pw_filter_remove_portPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'pw_filter_remove_port');
  late final _pw_filter_remove_port = _pw_filter_remove_portPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// get properties, port_data of NULL will give global properties
  ffi.Pointer<pw_properties> pw_filter_get_properties(
    ffi.Pointer<pw_filter> filter,
    ffi.Pointer<ffi.Void> port_data,
  ) {
    return _pw_filter_get_properties(
      filter,
      port_data,
    );
  }

  late final _pw_filter_get_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_properties> Function(ffi.Pointer<pw_filter>,
              ffi.Pointer<ffi.Void>)>>('pw_filter_get_properties');
  late final _pw_filter_get_properties =
      _pw_filter_get_propertiesPtr.asFunction<
          ffi.Pointer<pw_properties> Function(
              ffi.Pointer<pw_filter>, ffi.Pointer<ffi.Void>)>();

  /// Update properties, use NULL port_data for global filter properties
  int pw_filter_update_properties(
    ffi.Pointer<pw_filter> filter,
    ffi.Pointer<ffi.Void> port_data,
    ffi.Pointer<spa_dict> dict,
  ) {
    return _pw_filter_update_properties(
      filter,
      port_data,
      dict,
    );
  }

  late final _pw_filter_update_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_filter>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<spa_dict>)>>('pw_filter_update_properties');
  late final _pw_filter_update_properties =
      _pw_filter_update_propertiesPtr.asFunction<
          int Function(ffi.Pointer<pw_filter>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<spa_dict>)>();

  /// Set the filter in error state
  int pw_filter_set_error(
    ffi.Pointer<pw_filter> filter,
    int res,
    ffi.Pointer<ffi.Char> error,
  ) {
    return _pw_filter_set_error(
      filter,
      res,
      error,
    );
  }

  late final _pw_filter_set_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_filter>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('pw_filter_set_error');
  late final _pw_filter_set_error = _pw_filter_set_errorPtr.asFunction<
      int Function(ffi.Pointer<pw_filter>, int, ffi.Pointer<ffi.Char>)>();

  /// Update params, use NULL port_data for global filter params
  int pw_filter_update_params(
    ffi.Pointer<pw_filter> filter,
    ffi.Pointer<ffi.Void> port_data,
    ffi.Pointer<ffi.Pointer<spa_pod>> params,
    int n_params,
  ) {
    return _pw_filter_update_params(
      filter,
      port_data,
      params,
      n_params,
    );
  }

  late final _pw_filter_update_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pw_filter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<spa_pod>>,
              ffi.Uint32)>>('pw_filter_update_params');
  late final _pw_filter_update_params = _pw_filter_update_paramsPtr.asFunction<
      int Function(ffi.Pointer<pw_filter>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Pointer<spa_pod>>, int)>();

  /// Query the time on the filter
  int pw_filter_get_time(
    ffi.Pointer<pw_filter> filter,
    ffi.Pointer<pw_time> time,
  ) {
    return _pw_filter_get_time(
      filter,
      time,
    );
  }

  late final _pw_filter_get_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_filter>,
              ffi.Pointer<pw_time>)>>('pw_filter_get_time');
  late final _pw_filter_get_time = _pw_filter_get_timePtr
      .asFunction<int Function(ffi.Pointer<pw_filter>, ffi.Pointer<pw_time>)>();

  /// Get a buffer that can be filled for output ports or consumed
  /// for input ports.
  ffi.Pointer<pw_buffer> pw_filter_dequeue_buffer(
    ffi.Pointer<ffi.Void> port_data,
  ) {
    return _pw_filter_dequeue_buffer(
      port_data,
    );
  }

  late final _pw_filter_dequeue_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_buffer> Function(
              ffi.Pointer<ffi.Void>)>>('pw_filter_dequeue_buffer');
  late final _pw_filter_dequeue_buffer = _pw_filter_dequeue_bufferPtr
      .asFunction<ffi.Pointer<pw_buffer> Function(ffi.Pointer<ffi.Void>)>();

  /// Submit a buffer for playback or recycle a buffer for capture.
  int pw_filter_queue_buffer(
    ffi.Pointer<ffi.Void> port_data,
    ffi.Pointer<pw_buffer> buffer,
  ) {
    return _pw_filter_queue_buffer(
      port_data,
      buffer,
    );
  }

  late final _pw_filter_queue_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<pw_buffer>)>>('pw_filter_queue_buffer');
  late final _pw_filter_queue_buffer = _pw_filter_queue_bufferPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<pw_buffer>)>();

  /// Get a data pointer to the buffer data
  ffi.Pointer<ffi.Void> pw_filter_get_dsp_buffer(
    ffi.Pointer<ffi.Void> port_data,
    int n_samples,
  ) {
    return _pw_filter_get_dsp_buffer(
      port_data,
      n_samples,
    );
  }

  late final _pw_filter_get_dsp_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Uint32)>>('pw_filter_get_dsp_buffer');
  late final _pw_filter_get_dsp_buffer = _pw_filter_get_dsp_bufferPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// Activate or deactivate the filter
  int pw_filter_set_active(
    ffi.Pointer<pw_filter> filter,
    bool active,
  ) {
    return _pw_filter_set_active(
      filter,
      active,
    );
  }

  late final _pw_filter_set_activePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pw_filter>, ffi.Bool)>>('pw_filter_set_active');
  late final _pw_filter_set_active = _pw_filter_set_activePtr
      .asFunction<int Function(ffi.Pointer<pw_filter>, bool)>();

  /// Flush a filter. When \a drain is true, the drained callback will
  /// be called when all data is played or recorded
  int pw_filter_flush(
    ffi.Pointer<pw_filter> filter,
    bool drain,
  ) {
    return _pw_filter_flush(
      filter,
      drain,
    );
  }

  late final _pw_filter_flushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pw_filter>, ffi.Bool)>>('pw_filter_flush');
  late final _pw_filter_flush = _pw_filter_flushPtr
      .asFunction<int Function(ffi.Pointer<pw_filter>, bool)>();

  /// Make a new thread loop with the given name and optional properties.
  ffi.Pointer<pw_thread_loop> pw_thread_loop_new(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<spa_dict> props,
  ) {
    return _pw_thread_loop_new(
      name,
      props,
    );
  }

  late final _pw_thread_loop_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_thread_loop> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<spa_dict>)>>('pw_thread_loop_new');
  late final _pw_thread_loop_new = _pw_thread_loop_newPtr.asFunction<
      ffi.Pointer<pw_thread_loop> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<spa_dict>)>();

  /// Make a new thread loop with the given loop, name and optional properties.
  /// When \a loop is NULL, a new loop will be created.
  ffi.Pointer<pw_thread_loop> pw_thread_loop_new_full(
    ffi.Pointer<pw_loop> loop,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<spa_dict> props,
  ) {
    return _pw_thread_loop_new_full(
      loop,
      name,
      props,
    );
  }

  late final _pw_thread_loop_new_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_thread_loop> Function(
              ffi.Pointer<pw_loop>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<spa_dict>)>>('pw_thread_loop_new_full');
  late final _pw_thread_loop_new_full = _pw_thread_loop_new_fullPtr.asFunction<
      ffi.Pointer<pw_thread_loop> Function(ffi.Pointer<pw_loop>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<spa_dict>)>();

  /// Destroy a thread loop
  void pw_thread_loop_destroy(
    ffi.Pointer<pw_thread_loop> loop,
  ) {
    return _pw_thread_loop_destroy(
      loop,
    );
  }

  late final _pw_thread_loop_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_thread_loop>)>>(
      'pw_thread_loop_destroy');
  late final _pw_thread_loop_destroy = _pw_thread_loop_destroyPtr
      .asFunction<void Function(ffi.Pointer<pw_thread_loop>)>();

  /// Add an event listener
  void pw_thread_loop_add_listener(
    ffi.Pointer<pw_thread_loop> loop,
    ffi.Pointer<spa_hook> listener,
    ffi.Pointer<pw_thread_loop_events> events,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _pw_thread_loop_add_listener(
      loop,
      listener,
      events,
      data,
    );
  }

  late final _pw_thread_loop_add_listenerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pw_thread_loop>,
              ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_thread_loop_events>,
              ffi.Pointer<ffi.Void>)>>('pw_thread_loop_add_listener');
  late final _pw_thread_loop_add_listener =
      _pw_thread_loop_add_listenerPtr.asFunction<
          void Function(ffi.Pointer<pw_thread_loop>, ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_thread_loop_events>, ffi.Pointer<ffi.Void>)>();

  /// Get the loop implementation of the thread loop
  ffi.Pointer<pw_loop> pw_thread_loop_get_loop(
    ffi.Pointer<pw_thread_loop> loop,
  ) {
    return _pw_thread_loop_get_loop(
      loop,
    );
  }

  late final _pw_thread_loop_get_loopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_loop> Function(
              ffi.Pointer<pw_thread_loop>)>>('pw_thread_loop_get_loop');
  late final _pw_thread_loop_get_loop = _pw_thread_loop_get_loopPtr
      .asFunction<ffi.Pointer<pw_loop> Function(ffi.Pointer<pw_thread_loop>)>();

  /// Start the thread loop
  int pw_thread_loop_start(
    ffi.Pointer<pw_thread_loop> loop,
  ) {
    return _pw_thread_loop_start(
      loop,
    );
  }

  late final _pw_thread_loop_startPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pw_thread_loop>)>>(
      'pw_thread_loop_start');
  late final _pw_thread_loop_start = _pw_thread_loop_startPtr
      .asFunction<int Function(ffi.Pointer<pw_thread_loop>)>();

  /// Stop the thread loop
  void pw_thread_loop_stop(
    ffi.Pointer<pw_thread_loop> loop,
  ) {
    return _pw_thread_loop_stop(
      loop,
    );
  }

  late final _pw_thread_loop_stopPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_thread_loop>)>>(
      'pw_thread_loop_stop');
  late final _pw_thread_loop_stop = _pw_thread_loop_stopPtr
      .asFunction<void Function(ffi.Pointer<pw_thread_loop>)>();

  /// Lock the loop. This ensures exclusive ownership of the loop
  void pw_thread_loop_lock(
    ffi.Pointer<pw_thread_loop> loop,
  ) {
    return _pw_thread_loop_lock(
      loop,
    );
  }

  late final _pw_thread_loop_lockPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_thread_loop>)>>(
      'pw_thread_loop_lock');
  late final _pw_thread_loop_lock = _pw_thread_loop_lockPtr
      .asFunction<void Function(ffi.Pointer<pw_thread_loop>)>();

  /// Unlock the loop
  void pw_thread_loop_unlock(
    ffi.Pointer<pw_thread_loop> loop,
  ) {
    return _pw_thread_loop_unlock(
      loop,
    );
  }

  late final _pw_thread_loop_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_thread_loop>)>>(
      'pw_thread_loop_unlock');
  late final _pw_thread_loop_unlock = _pw_thread_loop_unlockPtr
      .asFunction<void Function(ffi.Pointer<pw_thread_loop>)>();

  /// Release the lock and wait until some thread calls \ref pw_thread_loop_signal
  void pw_thread_loop_wait(
    ffi.Pointer<pw_thread_loop> loop,
  ) {
    return _pw_thread_loop_wait(
      loop,
    );
  }

  late final _pw_thread_loop_waitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_thread_loop>)>>(
      'pw_thread_loop_wait');
  late final _pw_thread_loop_wait = _pw_thread_loop_waitPtr
      .asFunction<void Function(ffi.Pointer<pw_thread_loop>)>();

  /// Release the lock and wait a maximum of 'wait_max_sec' seconds
  /// until some thread calls \ref pw_thread_loop_signal or time out
  int pw_thread_loop_timed_wait(
    ffi.Pointer<pw_thread_loop> loop,
    int wait_max_sec,
  ) {
    return _pw_thread_loop_timed_wait(
      loop,
      wait_max_sec,
    );
  }

  late final _pw_thread_loop_timed_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_thread_loop>,
              ffi.Int)>>('pw_thread_loop_timed_wait');
  late final _pw_thread_loop_timed_wait = _pw_thread_loop_timed_waitPtr
      .asFunction<int Function(ffi.Pointer<pw_thread_loop>, int)>();

  /// Get a struct timespec suitable for \ref pw_thread_loop_timed_wait_full.
  /// Since: 0.3.7
  int pw_thread_loop_get_time(
    ffi.Pointer<pw_thread_loop> loop,
    ffi.Pointer<timespec> abstime,
    int timeout,
  ) {
    return _pw_thread_loop_get_time(
      loop,
      abstime,
      timeout,
    );
  }

  late final _pw_thread_loop_get_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_thread_loop>, ffi.Pointer<timespec>,
              ffi.Int64)>>('pw_thread_loop_get_time');
  late final _pw_thread_loop_get_time = _pw_thread_loop_get_timePtr.asFunction<
      int Function(ffi.Pointer<pw_thread_loop>, ffi.Pointer<timespec>, int)>();

  /// Release the lock and wait up to \a abstime until some thread calls
  /// \ref pw_thread_loop_signal. Use \ref pw_thread_loop_get_time to make a timeout.
  /// Since: 0.3.7
  int pw_thread_loop_timed_wait_full(
    ffi.Pointer<pw_thread_loop> loop,
    ffi.Pointer<timespec> abstime,
  ) {
    return _pw_thread_loop_timed_wait_full(
      loop,
      abstime,
    );
  }

  late final _pw_thread_loop_timed_wait_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pw_thread_loop>,
              ffi.Pointer<timespec>)>>('pw_thread_loop_timed_wait_full');
  late final _pw_thread_loop_timed_wait_full =
      _pw_thread_loop_timed_wait_fullPtr.asFunction<
          int Function(ffi.Pointer<pw_thread_loop>, ffi.Pointer<timespec>)>();

  /// Signal all threads waiting with \ref pw_thread_loop_wait
  void pw_thread_loop_signal(
    ffi.Pointer<pw_thread_loop> loop,
    bool wait_for_accept,
  ) {
    return _pw_thread_loop_signal(
      loop,
      wait_for_accept,
    );
  }

  late final _pw_thread_loop_signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pw_thread_loop>, ffi.Bool)>>('pw_thread_loop_signal');
  late final _pw_thread_loop_signal = _pw_thread_loop_signalPtr
      .asFunction<void Function(ffi.Pointer<pw_thread_loop>, bool)>();

  /// Signal all threads executing \ref pw_thread_loop_signal with wait_for_accept
  void pw_thread_loop_accept(
    ffi.Pointer<pw_thread_loop> loop,
  ) {
    return _pw_thread_loop_accept(
      loop,
    );
  }

  late final _pw_thread_loop_acceptPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_thread_loop>)>>(
      'pw_thread_loop_accept');
  late final _pw_thread_loop_accept = _pw_thread_loop_acceptPtr
      .asFunction<void Function(ffi.Pointer<pw_thread_loop>)>();

  /// Check if inside the thread
  bool pw_thread_loop_in_thread(
    ffi.Pointer<pw_thread_loop> loop,
  ) {
    return _pw_thread_loop_in_thread(
      loop,
    );
  }

  late final _pw_thread_loop_in_threadPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<pw_thread_loop>)>>(
      'pw_thread_loop_in_thread');
  late final _pw_thread_loop_in_thread = _pw_thread_loop_in_threadPtr
      .asFunction<bool Function(ffi.Pointer<pw_thread_loop>)>();

  /// Make a new loop.
  ffi.Pointer<pw_data_loop> pw_data_loop_new(
    ffi.Pointer<spa_dict> props,
  ) {
    return _pw_data_loop_new(
      props,
    );
  }

  late final _pw_data_loop_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_data_loop> Function(
              ffi.Pointer<spa_dict>)>>('pw_data_loop_new');
  late final _pw_data_loop_new = _pw_data_loop_newPtr
      .asFunction<ffi.Pointer<pw_data_loop> Function(ffi.Pointer<spa_dict>)>();

  /// Add an event listener to loop
  void pw_data_loop_add_listener(
    ffi.Pointer<pw_data_loop> loop,
    ffi.Pointer<spa_hook> listener,
    ffi.Pointer<pw_data_loop_events> events,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _pw_data_loop_add_listener(
      loop,
      listener,
      events,
      data,
    );
  }

  late final _pw_data_loop_add_listenerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pw_data_loop>,
              ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_data_loop_events>,
              ffi.Pointer<ffi.Void>)>>('pw_data_loop_add_listener');
  late final _pw_data_loop_add_listener =
      _pw_data_loop_add_listenerPtr.asFunction<
          void Function(ffi.Pointer<pw_data_loop>, ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_data_loop_events>, ffi.Pointer<ffi.Void>)>();

  /// wait for activity on the loop up to \a timeout milliseconds.
  /// Should be called from the loop function
  int pw_data_loop_wait(
    ffi.Pointer<pw_data_loop> loop,
    int timeout,
  ) {
    return _pw_data_loop_wait(
      loop,
      timeout,
    );
  }

  late final _pw_data_loop_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pw_data_loop>, ffi.Int)>>('pw_data_loop_wait');
  late final _pw_data_loop_wait = _pw_data_loop_waitPtr
      .asFunction<int Function(ffi.Pointer<pw_data_loop>, int)>();

  /// make sure the thread will exit. Can be called from a loop callback
  void pw_data_loop_exit(
    ffi.Pointer<pw_data_loop> loop,
  ) {
    return _pw_data_loop_exit(
      loop,
    );
  }

  late final _pw_data_loop_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_data_loop>)>>(
          'pw_data_loop_exit');
  late final _pw_data_loop_exit = _pw_data_loop_exitPtr
      .asFunction<void Function(ffi.Pointer<pw_data_loop>)>();

  /// Get the loop implementation of this data loop
  ffi.Pointer<pw_loop> pw_data_loop_get_loop(
    ffi.Pointer<pw_data_loop> loop,
  ) {
    return _pw_data_loop_get_loop(
      loop,
    );
  }

  late final _pw_data_loop_get_loopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pw_loop> Function(
              ffi.Pointer<pw_data_loop>)>>('pw_data_loop_get_loop');
  late final _pw_data_loop_get_loop = _pw_data_loop_get_loopPtr
      .asFunction<ffi.Pointer<pw_loop> Function(ffi.Pointer<pw_data_loop>)>();

  /// Destroy the loop
  void pw_data_loop_destroy(
    ffi.Pointer<pw_data_loop> loop,
  ) {
    return _pw_data_loop_destroy(
      loop,
    );
  }

  late final _pw_data_loop_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pw_data_loop>)>>(
          'pw_data_loop_destroy');
  late final _pw_data_loop_destroy = _pw_data_loop_destroyPtr
      .asFunction<void Function(ffi.Pointer<pw_data_loop>)>();

  /// Start the processing thread
  int pw_data_loop_start(
    ffi.Pointer<pw_data_loop> loop,
  ) {
    return _pw_data_loop_start(
      loop,
    );
  }

  late final _pw_data_loop_startPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pw_data_loop>)>>(
          'pw_data_loop_start');
  late final _pw_data_loop_start = _pw_data_loop_startPtr
      .asFunction<int Function(ffi.Pointer<pw_data_loop>)>();

  /// Stop the processing thread
  int pw_data_loop_stop(
    ffi.Pointer<pw_data_loop> loop,
  ) {
    return _pw_data_loop_stop(
      loop,
    );
  }

  late final _pw_data_loop_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pw_data_loop>)>>(
          'pw_data_loop_stop');
  late final _pw_data_loop_stop = _pw_data_loop_stopPtr
      .asFunction<int Function(ffi.Pointer<pw_data_loop>)>();

  /// Check if the current thread is the processing thread
  bool pw_data_loop_in_thread(
    ffi.Pointer<pw_data_loop> loop,
  ) {
    return _pw_data_loop_in_thread(
      loop,
    );
  }

  late final _pw_data_loop_in_threadPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<pw_data_loop>)>>(
          'pw_data_loop_in_thread');
  late final _pw_data_loop_in_thread = _pw_data_loop_in_threadPtr
      .asFunction<bool Function(ffi.Pointer<pw_data_loop>)>();

  /// Get the thread object
  ffi.Pointer<spa_thread> pw_data_loop_get_thread(
    ffi.Pointer<pw_data_loop> loop,
  ) {
    return _pw_data_loop_get_thread(
      loop,
    );
  }

  late final _pw_data_loop_get_threadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<spa_thread> Function(
              ffi.Pointer<pw_data_loop>)>>('pw_data_loop_get_thread');
  late final _pw_data_loop_get_thread = _pw_data_loop_get_threadPtr.asFunction<
      ffi.Pointer<spa_thread> Function(ffi.Pointer<pw_data_loop>)>();

  /// invoke func in the context of the thread or in the caller thread when
  /// the loop is not running. Since 0.3.3
  int pw_data_loop_invoke(
    ffi.Pointer<pw_data_loop> loop,
    spa_invoke_func_t func,
    int seq,
    ffi.Pointer<ffi.Void> data,
    int size,
    bool block,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _pw_data_loop_invoke(
      loop,
      func,
      seq,
      data,
      size,
      block,
      user_data,
    );
  }

  late final _pw_data_loop_invokePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pw_data_loop>,
              spa_invoke_func_t,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Bool,
              ffi.Pointer<ffi.Void>)>>('pw_data_loop_invoke');
  late final _pw_data_loop_invoke = _pw_data_loop_invokePtr.asFunction<
      int Function(ffi.Pointer<pw_data_loop>, spa_invoke_func_t, int,
          ffi.Pointer<ffi.Void>, int, bool, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<spa_type_info> pw_type_info() {
    return _pw_type_info();
  }

  late final _pw_type_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<spa_type_info> Function()>>(
          'pw_type_info');
  late final _pw_type_info =
      _pw_type_infoPtr.asFunction<ffi.Pointer<spa_type_info> Function()>();

  /// Return the version of the library the current application is
  /// linked to.
  ffi.Pointer<ffi.Char> pw_get_library_version() {
    return _pw_get_library_version();
  }

  late final _pw_get_library_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'pw_get_library_version');
  late final _pw_get_library_version =
      _pw_get_library_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// \addtogroup pw_pipewire
  /// \{
  void pw_init(
    ffi.Pointer<ffi.Int> argc,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> argv,
  ) {
    return _pw_init(
      argc,
      argv,
    );
  }

  late final _pw_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>)>>('pw_init');
  late final _pw_init = _pw_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>)>();

  void pw_deinit() {
    return _pw_deinit();
  }

  late final _pw_deinitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('pw_deinit');
  late final _pw_deinit = _pw_deinitPtr.asFunction<void Function()>();

  bool pw_debug_is_category_enabled(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _pw_debug_is_category_enabled(
      name,
    );
  }

  late final _pw_debug_is_category_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'pw_debug_is_category_enabled');
  late final _pw_debug_is_category_enabled = _pw_debug_is_category_enabledPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> pw_get_application_name() {
    return _pw_get_application_name();
  }

  late final _pw_get_application_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'pw_get_application_name');
  late final _pw_get_application_name = _pw_get_application_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> pw_get_prgname() {
    return _pw_get_prgname();
  }

  late final _pw_get_prgnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'pw_get_prgname');
  late final _pw_get_prgname =
      _pw_get_prgnamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> pw_get_user_name() {
    return _pw_get_user_name();
  }

  late final _pw_get_user_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'pw_get_user_name');
  late final _pw_get_user_name =
      _pw_get_user_namePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> pw_get_host_name() {
    return _pw_get_host_name();
  }

  late final _pw_get_host_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'pw_get_host_name');
  late final _pw_get_host_name =
      _pw_get_host_namePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> pw_get_client_name() {
    return _pw_get_client_name();
  }

  late final _pw_get_client_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'pw_get_client_name');
  late final _pw_get_client_name =
      _pw_get_client_namePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  bool pw_in_valgrind() {
    return _pw_in_valgrind();
  }

  late final _pw_in_valgrindPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('pw_in_valgrind');
  late final _pw_in_valgrind = _pw_in_valgrindPtr.asFunction<bool Function()>();

  bool pw_check_option(
    ffi.Pointer<ffi.Char> option,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _pw_check_option(
      option,
      value,
    );
  }

  late final _pw_check_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('pw_check_option');
  late final _pw_check_option = _pw_check_optionPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int pw_direction_reverse(
    int direction,
  ) {
    return _pw_direction_reverse(
      direction,
    );
  }

  late final _pw_direction_reversePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'pw_direction_reverse');
  late final _pw_direction_reverse =
      _pw_direction_reversePtr.asFunction<int Function(int)>();

  int pw_set_domain(
    ffi.Pointer<ffi.Char> domain,
  ) {
    return _pw_set_domain(
      domain,
    );
  }

  late final _pw_set_domainPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'pw_set_domain');
  late final _pw_set_domain =
      _pw_set_domainPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> pw_get_domain() {
    return _pw_get_domain();
  }

  late final _pw_get_domainPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'pw_get_domain');
  late final _pw_get_domain =
      _pw_get_domainPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int pw_get_support(
    ffi.Pointer<spa_support> support,
    int max_support,
  ) {
    return _pw_get_support(
      support,
      max_support,
    );
  }

  late final _pw_get_supportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<spa_support>, ffi.Uint32)>>('pw_get_support');
  late final _pw_get_support = _pw_get_supportPtr
      .asFunction<int Function(ffi.Pointer<spa_support>, int)>();

  ffi.Pointer<spa_handle> pw_load_spa_handle(
    ffi.Pointer<ffi.Char> lib,
    ffi.Pointer<ffi.Char> factory_name,
    ffi.Pointer<spa_dict> info,
    int n_support,
    ffi.Pointer<spa_support> support,
  ) {
    return _pw_load_spa_handle(
      lib,
      factory_name,
      info,
      n_support,
      support,
    );
  }

  late final _pw_load_spa_handlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<spa_handle> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<spa_dict>,
              ffi.Uint32,
              ffi.Pointer<spa_support>)>>('pw_load_spa_handle');
  late final _pw_load_spa_handle = _pw_load_spa_handlePtr.asFunction<
      ffi.Pointer<spa_handle> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<spa_dict>,
          int,
          ffi.Pointer<spa_support>)>();

  int pw_unload_spa_handle(
    ffi.Pointer<spa_handle> handle,
  ) {
    return _pw_unload_spa_handle(
      handle,
    );
  }

  late final _pw_unload_spa_handlePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<spa_handle>)>>(
          'pw_unload_spa_handle');
  late final _pw_unload_spa_handle = _pw_unload_spa_handlePtr
      .asFunction<int Function(ffi.Pointer<spa_handle>)>();
}

/// \addtogroup pw_array
/// \{
class pw_array extends ffi.Struct {
  /// < pointer to array data
  external ffi.Pointer<ffi.Void> data;

  /// < length of array in bytes
  @ffi.Size()
  external int size;

  /// < number of allocated memory in \a data
  @ffi.Size()
  external int alloc;

  /// < number of bytes to extend with
  @ffi.Size()
  external int extend;
}

/// \addtogroup pw_proxy
/// \{
class pw_proxy extends ffi.Opaque {}

/// \addtogroup pw_protocol
/// \{
class pw_protocol extends ffi.Opaque {}

/// \addtogroup pw_context
/// @{
class pw_context extends ffi.Opaque {}

class pw_global extends ffi.Opaque {}

class pw_impl_client extends ffi.Opaque {}

class pw_core extends ffi.Opaque {}

class pw_registry extends ffi.Opaque {}

/// The core information. Extra information may be added in later versions,
/// clients must not assume a constant struct size
class pw_core_info extends ffi.Struct {
  /// < id of the global
  @ffi.Uint32()
  external int id;

  /// < a random cookie for identifying this instance of PipeWire
  @ffi.Uint32()
  external int cookie;

  /// < name of the user that started the core
  external ffi.Pointer<ffi.Char> user_name;

  /// < name of the machine the core is running on
  external ffi.Pointer<ffi.Char> host_name;

  /// < version of the core
  external ffi.Pointer<ffi.Char> version;

  /// < name of the core
  external ffi.Pointer<ffi.Char> name;

  /// < bitfield of changed fields since last call
  @ffi.Uint64()
  external int change_mask;

  /// < extra properties
  external ffi.Pointer<spa_dict> props;
}

class spa_dict extends ffi.Struct {
  @ffi.Uint32()
  external int flags;

  @ffi.Uint32()
  external int n_items;

  external ffi.Pointer<spa_dict_item> items;
}

/// \addtogroup spa_dict
/// \{
class spa_dict_item extends ffi.Struct {
  external ffi.Pointer<ffi.Char> key;

  external ffi.Pointer<ffi.Char> value;
}

/// \addtogroup pw_properties
/// \{
class pw_properties extends ffi.Struct {
  /// < dictionary of key/values
  external spa_dict dict;

  /// < extra flags
  @ffi.Uint32()
  external int flags;
}

class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

typedef FILE = _IO_FILE;

class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Size()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

class _IO_marker extends ffi.Opaque {}

typedef __off_t = ffi.Long;
typedef _IO_lock_t = ffi.Void;
typedef __off64_t = ffi.Long;

class _IO_codecvt extends ffi.Opaque {}

class _IO_wide_data extends ffi.Opaque {}

/// \struct pw_core_events
/// \brief Core events
class pw_core_events extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  /// Notify new core info
  ///
  /// This event is emitted when first bound to the core or when the
  /// hello method is called.
  ///
  /// \param info new core info
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<pw_core_info>)>> info;

  /// Emit a done event
  ///
  /// The done event is emitted as a result of a sync method with the
  /// same seq number.
  ///
  /// \param seq the seq number passed to the sync method call
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Int)>> done;

  /// Emit a ping event
  ///
  /// The client should reply with a pong reply with the same seq
  /// number.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Int)>> ping;

  /// Fatal error event
  ///
  /// The error event is sent out when a fatal (non-recoverable)
  /// error has occurred. The id argument is the proxy object where
  /// the error occurred, most often in response to a request to that
  /// object. The message is a brief description of the error,
  /// for (debugging) convenience.
  ///
  /// This event is usually also emitted on the proxy object with
  /// \a id.
  ///
  /// \param id object where the error occurred
  /// \param seq the sequence number that generated the error
  /// \param res error code
  /// \param message error description
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>)>> error;

  /// Remove an object ID
  ///
  /// This event is used internally by the object ID management
  /// logic. When a client deletes an object, the server will send
  /// this event to acknowledge that it has seen the delete request.
  /// When the client receives this event, it will know that it can
  /// safely reuse the object ID.
  ///
  /// \param id deleted object ID
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32)>> remove_id;

  /// Notify an object binding
  ///
  /// This event is emitted when a local object ID is bound to a
  /// global ID. It is emitted before the global becomes visible in the
  /// registry.
  ///
  /// \param id bound object ID
  /// \param global_id the global id bound to
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32)>>
      bound_id;

  /// Add memory for a client
  ///
  /// Memory is given to a client as \a fd of a certain
  /// memory \a type.
  ///
  /// Further references to this fd will be made with the per memory
  /// unique identifier \a id.
  ///
  /// \param id the unique id of the memory
  /// \param type the memory type, one of enum spa_data_type
  /// \param fd the file descriptor
  /// \param flags extra flags
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32,
              ffi.Int, ffi.Uint32)>> add_mem;

  /// Remove memory for a client
  ///
  /// \param id the memory id to remove
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32)>> remove_mem;
}

/// \struct pw_core_methods
/// \brief Core methods
///
/// The core global object. This is a singleton object used for
/// creating new objects in the remote PipeWire instance. It is
/// also used for internal features.
class pw_core_methods extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_core_events>,
              ffi.Pointer<ffi.Void>)>> add_listener;

  /// Start a conversation with the server. This will send
  /// the core info and will destroy all resources for the client
  /// (except the core and client resource).
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Uint32)>> hello;

  /// Do server roundtrip
  ///
  /// Ask the server to emit the 'done' event with \a seq.
  ///
  /// Since methods are handled in-order and events are delivered
  /// in-order, this can be used as a barrier to ensure all previous
  /// methods and the resulting events have been handled.
  ///
  /// \param seq the seq number passed to the done event
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Int)>> sync1;

  /// Reply to a server ping event.
  ///
  /// Reply to the server ping event with the same seq.
  ///
  /// \param seq the seq number received in the ping event
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Int)>> pong;

  /// Fatal error event
  ///
  /// The error method is sent out when a fatal (non-recoverable)
  /// error has occurred. The id argument is the proxy object where
  /// the error occurred, most often in response to an event on that
  /// object. The message is a brief description of the error,
  /// for (debugging) convenience.
  ///
  /// This method is usually also emitted on the resource object with
  /// \a id.
  ///
  /// \param id object where the error occurred
  /// \param res error code
  /// \param message error description
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>)>> error;

  /// Get the registry object
  ///
  /// Create a registry object that allows the client to list and bind
  /// the global objects available from the PipeWire server
  /// \param version the client version
  /// \param user_data_size extra size
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<pw_registry> Function(
              ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Size)>> get_registry;

  /// Create a new object on the PipeWire server from a factory.
  ///
  /// \param factory_name the factory name to use
  /// \param type the interface to bind to
  /// \param version the version of the interface
  /// \param props extra properties
  /// \param user_data_size extra size
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint32,
              ffi.Pointer<spa_dict>,
              ffi.Size)>> create_object;

  /// Destroy an resource
  ///
  /// Destroy the server resource for the given proxy.
  ///
  /// \param obj the proxy to destroy
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      destroy;
}

/// \struct spa_hook
/// A hook, contains the structure with functions and the data passed
/// to the functions.
///
/// A hook should be treated as opaque by the caller.
class spa_hook extends ffi.Struct {
  external spa_list link;

  external spa_callbacks cb;

  /// callback and data for the hook list, private to the
  /// hook_list implementor
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<spa_hook>)>>
      removed;

  external ffi.Pointer<ffi.Void> priv;
}

/// \addtogroup spa_list List
/// \{
class spa_list extends ffi.Struct {
  external ffi.Pointer<spa_list> next;

  external ffi.Pointer<spa_list> prev;
}

/// \struct spa_callbacks
/// Callbacks, contains the structure with functions and the data passed
/// to the functions.  The structure should also contain a version field that
/// is checked.
class spa_callbacks extends ffi.Struct {
  external ffi.Pointer<ffi.Void> funcs;

  external ffi.Pointer<ffi.Void> data;
}

/// Registry events
class pw_registry_events extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  /// Notify of a new global object
  ///
  /// The registry emits this event when a new global object is
  /// available.
  ///
  /// \param id the global object id
  /// \param permissions the permissions of the object
  /// \param type the type of the interface
  /// \param version the version of the interface
  /// \param props extra properties of the global
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Char>,
              ffi.Uint32,
              ffi.Pointer<spa_dict>)>> global;

  /// Notify of a global object removal
  ///
  /// Emitted when a global object was removed from the registry.
  /// If the client has any bindings to the global, it should destroy
  /// those.
  ///
  /// \param id the id of the global that was removed
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32)>> global_remove;
}

/// Registry methods
class pw_registry_methods extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_registry_events>,
              ffi.Pointer<ffi.Void>)>> add_listener;

  /// Bind to a global object
  ///
  /// Bind to the global object with \a id and use the client proxy
  /// with new_id as the proxy. After this call, methods can be
  /// send to the remote global object and events can be received
  ///
  /// \param id the global id to bind to
  /// \param type the interface type to bind to
  /// \param version the interface version to use
  /// \returns the new object
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Uint32,
              ffi.Pointer<ffi.Char>, ffi.Uint32, ffi.Size)>> bind;

  /// Attempt to destroy a global object
  ///
  /// Try to destroy the global object.
  ///
  /// \param id the global id to destroy
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Uint32)>> destroy;
}

class pw_client extends ffi.Opaque {}

/// A memory pool is a collection of pw_memblocks
class pw_mempool extends ffi.Struct {
  external ffi.Pointer<pw_properties> props;
}

/// \addtogroup pw_loop
/// \{
class pw_loop extends ffi.Struct {
  /// < system utils
  external ffi.Pointer<spa_system> system;

  /// < wrapped loop
  external ffi.Pointer<spa_loop> loop;

  /// < loop control
  external ffi.Pointer<spa_loop_control> control;

  /// < loop utils
  external ffi.Pointer<spa_loop_utils> utils;
}

class spa_system extends ffi.Struct {
  external spa_interface iface;
}

/// \struct spa_interface
class spa_interface extends ffi.Struct {
  external ffi.Pointer<ffi.Char> type;

  @ffi.Uint32()
  external int version;

  external spa_callbacks cb;
}

class spa_loop extends ffi.Struct {
  external spa_interface iface;
}

class spa_loop_control extends ffi.Struct {
  external spa_interface iface;
}

class spa_loop_utils extends ffi.Struct {
  external spa_interface iface;
}

/// context events emitted by the context object added with \ref pw_context_add_listener
class pw_context_events extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  /// The context is being destroyed
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      destroy;

  /// The context is being freed
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;

  /// a new client object is added
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<pw_impl_client>)>>
      check_access;

  /// a new global object was added
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<pw_global>)>>
      global_added;

  /// a global object was removed
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<pw_global>)>>
      global_removed;
}

/// Extra supporting infrastructure passed to the init() function of
/// a factory. It can be extra information or interfaces such as logging.
class spa_support extends ffi.Struct {
  /// < the type of the support item
  external ffi.Pointer<ffi.Char> type;

  /// < specific data for the item
  external ffi.Pointer<ffi.Void> data;
}

class pw_work_queue extends ffi.Opaque {}

/// \addtogroup spa_handle
/// \{
class spa_handle extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  /// Get the interface provided by \a handle with \a type.
  ///
  /// \a interface is always a struct spa_interface but depending on
  /// \a type, the struct might contain other information.
  ///
  /// \param handle a spa_handle
  /// \param type the interface type
  /// \param interface result to hold the interface.
  /// \return 0 on success
  /// -ENOTSUP when there are no interfaces
  /// -EINVAL when handle or info is NULL
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<spa_handle>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>> get_interface;

  /// Clean up the memory of \a handle. After this, \a handle should not be used
  /// anymore.
  ///
  /// \param handle a pointer to memory
  /// \return 0 on success
  external ffi.Pointer<
      ffi.NativeFunction<ffi.Int Function(ffi.Pointer<spa_handle>)>> clear;
}

/// data for registering export functions
class pw_export_type extends ffi.Struct {
  external spa_list link;

  external ffi.Pointer<ffi.Char> type;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<pw_proxy> Function(
              ffi.Pointer<pw_core>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<spa_dict>,
              ffi.Pointer<ffi.Void>,
              ffi.Size)>> func;
}

typedef ssize_t = __ssize_t;
typedef __ssize_t = ffi.Long;

class pw_protocol_client extends ffi.Struct {
  /// < link in protocol client_list
  external spa_list link;

  /// < the owner protocol
  external ffi.Pointer<pw_protocol> protocol;

  external ffi.Pointer<pw_core> core;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pw_protocol_client>,
              ffi.Pointer<spa_dict>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>,
              ffi.Pointer<ffi.Void>)>> connect;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pw_protocol_client>, ffi.Int, ffi.Bool)>> connect_fd;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pw_protocol_client>)>>
      steal_fd;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pw_protocol_client>)>> disconnect;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pw_protocol_client>)>> destroy;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pw_protocol_client>, ffi.Bool)>>
      set_paused;
}

class pw_protocol_server extends ffi.Struct {
  /// < link in protocol server_list
  external spa_list link;

  /// < the owner protocol
  external ffi.Pointer<pw_protocol> protocol;

  external ffi.Pointer<pw_impl_core> core;

  /// < list of clients of this protocol
  external spa_list client_list;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pw_protocol_server>)>> destroy;
}

class pw_impl_core extends ffi.Opaque {}

class pw_protocol_marshal extends ffi.Struct {
  /// < interface type
  external ffi.Pointer<ffi.Char> type;

  /// < version
  @ffi.Uint32()
  external int version;

  /// < version
  @ffi.Uint32()
  external int flags;

  /// < number of client methods
  @ffi.Uint32()
  external int n_client_methods;

  /// < number of server methods
  @ffi.Uint32()
  external int n_server_methods;

  external ffi.Pointer<ffi.Void> client_marshal;

  external ffi.Pointer<ffi.Void> server_demarshal;

  external ffi.Pointer<ffi.Void> server_marshal;

  external ffi.Pointer<ffi.Void> client_demarshal;
}

class pw_protocol_implementation extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<pw_protocol_client> Function(ffi.Pointer<pw_protocol>,
              ffi.Pointer<pw_core>, ffi.Pointer<spa_dict>)>> new_client;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<pw_protocol_server> Function(ffi.Pointer<pw_protocol>,
              ffi.Pointer<pw_impl_core>, ffi.Pointer<spa_dict>)>> add_server;
}

class pw_protocol_events extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      destroy;
}

/// Proxy events, use \ref pw_proxy_add_listener
class pw_proxy_events extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  /// The proxy is destroyed
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      destroy;

  /// a proxy is bound to a global id
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32)>> bound;

  /// a proxy is removed from the server. Use pw_proxy_destroy to
  /// free the proxy.
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      removed;

  /// a reply to a sync method completed
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>
      done;

  /// an error occurred on the proxy
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>)>> error;
}

/// \struct spa_hook_list
/// A list of hooks. This struct is primarily used by
/// implementation that use multiple caller-provided \ref spa_hook.
class spa_hook_list extends ffi.Struct {
  external spa_list list;
}

class pw_permission extends ffi.Struct {
  /// < id of object, PW_ID_ANY for default permission
  @ffi.Uint32()
  external int id;

  /// < bitmask of above permissions
  @ffi.Uint32()
  external int permissions;
}

/// The client information. Extra information can be added in later versions
class pw_client_info extends ffi.Struct {
  /// < id of the global
  @ffi.Uint32()
  external int id;

  /// < bitfield of changed fields since last call
  @ffi.Uint64()
  external int change_mask;

  /// < extra properties
  external ffi.Pointer<spa_dict> props;
}

/// Client events
class pw_client_events extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  /// Notify client info
  ///
  /// \param info info about the client
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<pw_client_info>)>> info;

  /// Notify a client permission
  ///
  /// Event emitted as a result of the get_permissions method.
  ///
  /// \param default_permissions the default permissions
  /// \param index the index of the first permission entry
  /// \param n_permissions the number of permissions
  /// \param permissions the permissions
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32,
              ffi.Pointer<pw_permission>)>> permissions;
}

/// Client methods
class pw_client_methods extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_client_events>,
              ffi.Pointer<ffi.Void>)>> add_listener;

  /// Send an error to a client
  ///
  /// \param id the global id to report the error on
  /// \param res an errno style error code
  /// \param message an error string
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Int,
              ffi.Pointer<ffi.Char>)>> error;

  /// Update client properties
  ///
  /// \param props new properties
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<spa_dict>)>>
      update_properties;

  /// Get client permissions
  ///
  /// A permissions event will be emitted with the permissions.
  ///
  /// \param index the first index to query, 0 for first
  /// \param num the maximum number of items to get
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32)>>
      get_permissions;

  /// Manage the permissions of the global objects for this
  /// client
  ///
  /// Update the permissions of the global objects using the
  /// provided array with permissions
  ///
  /// Globals can use the default permissions or can have specific
  /// permissions assigned to them.
  ///
  /// \param n_permissions number of permissions
  /// \param permissions array of permissions
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Uint32,
              ffi.Pointer<pw_permission>)>> update_permissions;
}

class pw_device extends ffi.Opaque {}

/// The device information. Extra information can be added in later versions
class pw_device_info extends ffi.Struct {
  /// < id of the global
  @ffi.Uint32()
  external int id;

  /// < bitfield of changed fields since last call
  @ffi.Uint64()
  external int change_mask;

  /// < extra properties
  external ffi.Pointer<spa_dict> props;

  /// < parameters
  external ffi.Pointer<spa_param_info> params;

  /// < number of items in \a params
  @ffi.Uint32()
  external int n_params;
}

/// information about a parameter
class spa_param_info extends ffi.Struct {
  /// < enum spa_param_type
  @ffi.Uint32()
  external int id;

  @ffi.Uint32()
  external int flags;

  /// < private user field. You can use this to keep
  /// state.
  @ffi.Uint32()
  external int user;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Uint32> padding;
}

/// Device events
class pw_device_events extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  /// Notify device info
  ///
  /// \param info info about the device
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<pw_device_info>)>> info;

  /// Notify a device param
  ///
  /// Event emitted as a result of the enum_params method.
  ///
  /// \param seq the sequence number of the request
  /// \param id the param id
  /// \param index the param index
  /// \param next the param index of the next param
  /// \param param the parameter
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Uint32,
              ffi.Uint32, ffi.Uint32, ffi.Pointer<spa_pod>)>> param;
}

class spa_pod extends ffi.Struct {
  /// size of the body
  @ffi.Uint32()
  external int size;

  /// a basic id of enum spa_type
  @ffi.Uint32()
  external int type;
}

/// Device methods
class pw_device_methods extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_device_events>,
              ffi.Pointer<ffi.Void>)>> add_listener;

  /// Subscribe to parameter changes
  ///
  /// Automatically emit param events for the given ids when
  /// they are changed.
  ///
  /// \param ids an array of param ids
  /// \param n_ids the number of ids in \a ids
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Uint32>, ffi.Uint32)>>
      subscribe_params;

  /// Enumerate device parameters
  ///
  /// Start enumeration of device parameters. For each param, a
  /// param event will be emitted.
  ///
  /// \param seq a sequence number to place in the reply
  /// \param id the parameter id to enum or PW_ID_ANY for all
  /// \param start the start index or 0 for the first param
  /// \param num the maximum number of params to retrieve
  /// \param filter a param filter or NULL
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Uint32,
              ffi.Uint32, ffi.Uint32, ffi.Pointer<spa_pod>)>> enum_params;

  /// Set a parameter on the device
  ///
  /// \param id the parameter id to set
  /// \param flags extra parameter flags
  /// \param param the parameter to set
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32,
              ffi.Pointer<spa_pod>)>> set_param;
}

/// Flags passed to \ref pw_mempool_alloc()
abstract class pw_memblock_flags {
  static const int PW_MEMBLOCK_FLAG_NONE = 0;

  /// < memory is readable
  static const int PW_MEMBLOCK_FLAG_READABLE = 1;

  /// < memory is writable
  static const int PW_MEMBLOCK_FLAG_WRITABLE = 2;

  /// < seal the fd
  static const int PW_MEMBLOCK_FLAG_SEAL = 4;

  /// < mmap the fd
  static const int PW_MEMBLOCK_FLAG_MAP = 8;

  /// < don't close fd
  static const int PW_MEMBLOCK_FLAG_DONT_CLOSE = 16;

  /// < don't notify events
  static const int PW_MEMBLOCK_FLAG_DONT_NOTIFY = 32;
  static const int PW_MEMBLOCK_FLAG_READWRITE = 3;
}

abstract class pw_memmap_flags {
  static const int PW_MEMMAP_FLAG_NONE = 0;

  /// < map in read mode
  static const int PW_MEMMAP_FLAG_READ = 1;

  /// < map in write mode
  static const int PW_MEMMAP_FLAG_WRITE = 2;

  /// < map the same area twice after each other,
  /// creating a circular ringbuffer
  static const int PW_MEMMAP_FLAG_TWICE = 4;

  /// < writes will be private
  static const int PW_MEMMAP_FLAG_PRIVATE = 8;

  /// < lock the memory into RAM
  static const int PW_MEMMAP_FLAG_LOCKED = 16;
  static const int PW_MEMMAP_FLAG_READWRITE = 3;
}

class pw_memchunk extends ffi.Opaque {}

/// Memory block structure
class pw_memblock extends ffi.Struct {
  /// < owner pool
  external ffi.Pointer<pw_mempool> pool;

  /// < unique id
  @ffi.Uint32()
  external int id;

  /// < refcount
  @ffi.Int()
  external int ref;

  /// < flags for the memory block on of enum pw_memblock_flags
  @ffi.Uint32()
  external int flags;

  /// < type of the fd, one of enum spa_data_type
  @ffi.Uint32()
  external int type;

  /// < fd
  @ffi.Int()
  external int fd;

  /// < size of memory
  @ffi.Uint32()
  external int size;

  /// < optional map when PW_MEMBLOCK_FLAG_MAP was given
  external ffi.Pointer<pw_memmap> map;
}

/// a mapped region of a pw_memblock
class pw_memmap extends ffi.Struct {
  /// < owner memblock
  external ffi.Pointer<pw_memblock> block;

  /// < mapped pointer
  external ffi.Pointer<ffi.Void> ptr;

  /// < flags for the mapping on of enum pw_memmap_flags
  @ffi.Uint32()
  external int flags;

  /// < offset in memblock
  @ffi.Uint32()
  external int offset;

  /// < size in memblock
  @ffi.Uint32()
  external int size;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Uint32> tag;
}

class pw_mempool_events extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  /// the pool is destroyed
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      destroy;

  /// a new memory block is added to the pool
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<pw_memblock>)>> added;

  /// a memory block is removed from the pool
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<pw_memblock>)>> removed;
}

/// parameters to map a memory range
class pw_map_range extends ffi.Struct {
  @ffi.Uint32()
  external int start;

  /// offset in first page with start of data
  @ffi.Uint32()
  external int offset;

  /// page aligned offset to map
  @ffi.Uint32()
  external int size;
}

class pw_buffers extends ffi.Struct {
  /// < allocated buffer memory
  external ffi.Pointer<pw_memblock> mem;

  /// < port buffers
  external ffi.Pointer<ffi.Pointer<spa_buffer>> buffers;

  /// < number of port buffers
  @ffi.Uint32()
  external int n_buffers;

  /// < flags
  @ffi.Uint32()
  external int flags;
}

/// A Buffer
class spa_buffer extends ffi.Struct {
  /// < number of metadata
  @ffi.Uint32()
  external int n_metas;

  /// < number of data members
  @ffi.Uint32()
  external int n_datas;

  /// < array of metadata
  external ffi.Pointer<spa_meta> metas;

  /// < array of data members
  external ffi.Pointer<spa_data> datas;
}

/// A metadata element.
///
/// This structure is available on the buffer structure and contains
/// the type of the metadata and a pointer/size to the actual metadata
/// itself.
class spa_meta extends ffi.Struct {
  /// < metadata type, one of enum spa_meta_type
  @ffi.Uint32()
  external int type;

  /// < size of metadata
  @ffi.Uint32()
  external int size;

  /// < pointer to metadata
  external ffi.Pointer<ffi.Void> data;
}

/// Data for a buffer this stays constant for a buffer
class spa_data extends ffi.Struct {
  /// < memory type, one of enum spa_data_type, when
  /// allocating memory, the type contains a bitmask
  /// of allowed types. SPA_ID_INVALID is a special
  /// value for the allocator to indicate that the
  /// other side did not explicitly specify any
  /// supported data types. It should probably use
  /// a memory type that does not require special
  /// handling in addition to simple mmap/munmap.
  @ffi.Uint32()
  external int type;

  /// < data flags
  @ffi.Uint32()
  external int flags;

  /// < optional fd for data
  @ffi.Int64()
  external int fd;

  /// < offset to map fd at
  @ffi.Uint32()
  external int mapoffset;

  /// < max size of data
  @ffi.Uint32()
  external int maxsize;

  /// < optional data pointer
  external ffi.Pointer<ffi.Void> data;

  /// < valid chunk of memory
  external ffi.Pointer<spa_chunk> chunk;
}

/// Chunk of memory, can change for each buffer
class spa_chunk extends ffi.Struct {
  /// < offset of valid data. Should be taken
  /// modulo the data maxsize to get the offset
  /// in the data memory.
  @ffi.Uint32()
  external int offset;

  /// < size of valid data. Should be clamped to
  /// maxsize.
  @ffi.Uint32()
  external int size;

  /// < stride of valid data
  @ffi.Int32()
  external int stride;

  /// < chunk flags
  @ffi.Int32()
  external int flags;
}

class spa_node extends ffi.Struct {
  external spa_interface iface;
}

class pw_factory extends ffi.Opaque {}

/// The factory information. Extra information can be added in later versions
class pw_factory_info extends ffi.Struct {
  /// < id of the global
  @ffi.Uint32()
  external int id;

  /// < name the factory
  external ffi.Pointer<ffi.Char> name;

  /// < type of the objects created by this factory
  external ffi.Pointer<ffi.Char> type;

  /// < version of the objects
  @ffi.Uint32()
  external int version;

  /// < bitfield of changed fields since last call
  @ffi.Uint64()
  external int change_mask;

  /// < the properties of the factory
  external ffi.Pointer<spa_dict> props;
}

/// Factory events
class pw_factory_events extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  /// Notify factory info
  ///
  /// \param info info about the factory
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<pw_factory_info>)>> info;
}

/// Factory methods
class pw_factory_methods extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_factory_events>,
              ffi.Pointer<ffi.Void>)>> add_listener;
}

abstract class spa_log_level {
  static const int SPA_LOG_LEVEL_NONE = 0;
  static const int SPA_LOG_LEVEL_ERROR = 1;
  static const int SPA_LOG_LEVEL_WARN = 2;
  static const int SPA_LOG_LEVEL_INFO = 3;
  static const int SPA_LOG_LEVEL_DEBUG = 4;
  static const int SPA_LOG_LEVEL_TRACE = 5;
}

/// \struct spa_log_topic
///
/// Identifier for a topic. Topics are string-based filters that logically
/// group messages together. An implementation may decide to filter different
/// topics on different levels, for example the "protocol" topic may require
/// debug level TRACE while the "core" topic defaults to debug level INFO.
///
/// spa_log_topics require a spa_log_methods version of 1 or higher.
class spa_log_topic extends ffi.Struct {
  /// the version of this topic. This can be used to expand this
  /// structure in the future
  @ffi.Uint32()
  external int version;

  /// The string identifier for the topic
  external ffi.Pointer<ffi.Char> topic;

  /// Logging level set for this topic
  @ffi.Int32()
  external int level;

  /// False if this topic follows the \ref spa_log level
  @ffi.Bool()
  external bool has_custom_level;
}

class spa_log extends ffi.Struct {
  external spa_interface iface;

  /// Logging level, everything above this level is not logged
  @ffi.Int32()
  external int level;
}

class pw_link extends ffi.Opaque {}

/// \enum pw_link_state The different link states
abstract class pw_link_state {
  /// < the link is in error
  static const int PW_LINK_STATE_ERROR = -2;

  /// < the link is unlinked
  static const int PW_LINK_STATE_UNLINKED = -1;

  /// < the link is initialized
  static const int PW_LINK_STATE_INIT = 0;

  /// < the link is negotiating formats
  static const int PW_LINK_STATE_NEGOTIATING = 1;

  /// < the link is allocating buffers
  static const int PW_LINK_STATE_ALLOCATING = 2;

  /// < the link is paused
  static const int PW_LINK_STATE_PAUSED = 3;

  /// < the link is active
  static const int PW_LINK_STATE_ACTIVE = 4;
}

/// The link information. Extra information can be added in later versions
class pw_link_info extends ffi.Struct {
  /// < id of the global
  @ffi.Uint32()
  external int id;

  /// < server side output node id
  @ffi.Uint32()
  external int output_node_id;

  /// < output port id
  @ffi.Uint32()
  external int output_port_id;

  /// < server side input node id
  @ffi.Uint32()
  external int input_node_id;

  /// < input port id
  @ffi.Uint32()
  external int input_port_id;

  /// < bitfield of changed fields since last call
  @ffi.Uint64()
  external int change_mask;

  /// < the current state of the link
  @ffi.Int32()
  external int state;

  /// < an error reason if \a state is error
  external ffi.Pointer<ffi.Char> error;

  /// < format over link
  external ffi.Pointer<spa_pod> format;

  /// < the properties of the link
  external ffi.Pointer<spa_dict> props;
}

/// Link events
class pw_link_events extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  /// Notify link info
  ///
  /// \param info info about the link
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<pw_link_info>)>> info;
}

/// Link methods
class pw_link_methods extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_link_events>,
              ffi.Pointer<ffi.Void>)>> add_listener;
}

/// A main loop object
class pw_main_loop extends ffi.Opaque {}

/// Events of the main loop
class pw_main_loop_events extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  /// Emitted when the main loop is destroyed
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      destroy;
}

/// \private
/// An entry in the map. This is used internally only. Each element in the
/// backing pw_array is a union pw_map_item. For real items, the data pointer
/// points to the item. If an element has been removed, pw_map->free_list
/// is the index of the most recently removed item. That item contains
/// the index of the next removed item until item->next is SPA_ID_INVALID.
///
/// The free list is prepended only, the last item to be removed will be the
/// first item to get re-used on the next insert.
class pw_map_item extends ffi.Union {
  /// next free index
  @uintptr_t()
  external int next;

  /// data of this item, must be an even address
  external ffi.Pointer<ffi.Void> data;
}

typedef uintptr_t = ffi.UnsignedLong;

/// A map. This struct should be treated as opaque by the caller.
class pw_map extends ffi.Struct {
  /// an array with the map items
  external pw_array items;

  /// first free index
  @ffi.Uint32()
  external int free_list;
}

class pw_module extends ffi.Opaque {}

/// The module information. Extra information can be added in later versions
class pw_module_info extends ffi.Struct {
  /// < id of the global
  @ffi.Uint32()
  external int id;

  /// < name of the module
  external ffi.Pointer<ffi.Char> name;

  /// < filename of the module
  external ffi.Pointer<ffi.Char> filename;

  /// < arguments passed to the module
  external ffi.Pointer<ffi.Char> args;

  /// < bitfield of changed fields since last call
  @ffi.Uint64()
  external int change_mask;

  /// < extra properties
  external ffi.Pointer<spa_dict> props;
}

/// Module events
class pw_module_events extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  /// Notify module info
  ///
  /// \param info info about the module
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<pw_module_info>)>> info;
}

/// Module methods
class pw_module_methods extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_module_events>,
              ffi.Pointer<ffi.Void>)>> add_listener;
}

class pw_node extends ffi.Opaque {}

/// \enum pw_node_state The different node states
abstract class pw_node_state {
  /// < error state
  static const int PW_NODE_STATE_ERROR = -1;

  /// < the node is being created
  static const int PW_NODE_STATE_CREATING = 0;

  /// < the node is suspended, the device might
  /// be closed
  static const int PW_NODE_STATE_SUSPENDED = 1;

  /// < the node is running but there is no active
  /// port
  static const int PW_NODE_STATE_IDLE = 2;

  /// < the node is running
  static const int PW_NODE_STATE_RUNNING = 3;
}

/// The node information. Extra information can be added in later versions
class pw_node_info extends ffi.Struct {
  /// < id of the global
  @ffi.Uint32()
  external int id;

  /// < maximum number of inputs
  @ffi.Uint32()
  external int max_input_ports;

  /// < maximum number of outputs
  @ffi.Uint32()
  external int max_output_ports;

  /// < bitfield of changed fields since last call
  @ffi.Uint64()
  external int change_mask;

  /// < number of inputs
  @ffi.Uint32()
  external int n_input_ports;

  /// < number of outputs
  @ffi.Uint32()
  external int n_output_ports;

  /// < the current state of the node
  @ffi.Int32()
  external int state;

  /// < an error reason if \a state is error
  external ffi.Pointer<ffi.Char> error;

  /// < the properties of the node
  external ffi.Pointer<spa_dict> props;

  /// < parameters
  external ffi.Pointer<spa_param_info> params;

  /// < number of items in \a params
  @ffi.Uint32()
  external int n_params;
}

/// Node events
class pw_node_events extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  /// Notify node info
  ///
  /// \param info info about the node
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<pw_node_info>)>> info;

  /// Notify a node param
  ///
  /// Event emitted as a result of the enum_params method.
  ///
  /// \param seq the sequence number of the request
  /// \param id the param id
  /// \param index the param index
  /// \param next the param index of the next param
  /// \param param the parameter
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Uint32,
              ffi.Uint32, ffi.Uint32, ffi.Pointer<spa_pod>)>> param;
}

/// Node methods
class pw_node_methods extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_node_events>,
              ffi.Pointer<ffi.Void>)>> add_listener;

  /// Subscribe to parameter changes
  ///
  /// Automatically emit param events for the given ids when
  /// they are changed.
  ///
  /// \param ids an array of param ids
  /// \param n_ids the number of ids in \a ids
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Uint32>, ffi.Uint32)>>
      subscribe_params;

  /// Enumerate node parameters
  ///
  /// Start enumeration of node parameters. For each param, a
  /// param event will be emitted.
  ///
  /// \param seq a sequence number to place in the reply
  /// \param id the parameter id to enum or PW_ID_ANY for all
  /// \param start the start index or 0 for the first param
  /// \param num the maximum number of params to retrieve
  /// \param filter a param filter or NULL
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Uint32,
              ffi.Uint32, ffi.Uint32, ffi.Pointer<spa_pod>)>> enum_params;

  /// Set a parameter on the node
  ///
  /// \param id the parameter id to set
  /// \param flags extra parameter flags
  /// \param param the parameter to set
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32,
              ffi.Pointer<spa_pod>)>> set_param;

  /// Send a command to the node
  ///
  /// \param command the command to send
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<spa_command>)>> send_command;
}

class spa_command extends ffi.Struct {
  external spa_pod pod;

  external spa_command_body body;
}

/// \addtogroup spa_pod
/// \{
class spa_command_body extends ffi.Struct {
  external spa_pod_object_body body;
}

class spa_pod_object_body extends ffi.Struct {
  /// < one of enum spa_type
  @ffi.Uint32()
  external int type;

  /// < id of the object, depends on the object type
  @ffi.Uint32()
  external int id;
}

class pw_port extends ffi.Opaque {}

abstract class spa_direction {
  static const int SPA_DIRECTION_INPUT = 0;
  static const int SPA_DIRECTION_OUTPUT = 1;
}

class pw_port_info extends ffi.Struct {
  /// < id of the global
  @ffi.Uint32()
  external int id;

  /// < port direction
  @ffi.Int32()
  external int direction;

  /// < bitfield of changed fields since last call
  @ffi.Uint64()
  external int change_mask;

  /// < the properties of the port
  external ffi.Pointer<spa_dict> props;

  /// < parameters
  external ffi.Pointer<spa_param_info> params;

  /// < number of items in \a params
  @ffi.Uint32()
  external int n_params;
}

/// Port events
class pw_port_events extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  /// Notify port info
  ///
  /// \param info info about the port
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<pw_port_info>)>> info;

  /// Notify a port param
  ///
  /// Event emitted as a result of the enum_params method.
  ///
  /// \param seq the sequence number of the request
  /// \param id the param id
  /// \param index the param index
  /// \param next the param index of the next param
  /// \param param the parameter
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Uint32,
              ffi.Uint32, ffi.Uint32, ffi.Pointer<spa_pod>)>> param;
}

/// Port methods
class pw_port_methods extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<spa_hook>,
              ffi.Pointer<pw_port_events>,
              ffi.Pointer<ffi.Void>)>> add_listener;

  /// Subscribe to parameter changes
  ///
  /// Automatically emit param events for the given ids when
  /// they are changed.
  ///
  /// \param ids an array of param ids
  /// \param n_ids the number of ids in \a ids
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Uint32>, ffi.Uint32)>>
      subscribe_params;

  /// Enumerate port parameters
  ///
  /// Start enumeration of port parameters. For each param, a
  /// param event will be emitted.
  ///
  /// \param seq a sequence number returned in the reply
  /// \param id the parameter id to enumerate
  /// \param start the start index or 0 for the first param
  /// \param num the maximum number of params to retrieve
  /// \param filter a param filter or NULL
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Uint32,
              ffi.Uint32, ffi.Uint32, ffi.Pointer<spa_pod>)>> enum_params;
}

/// \addtogroup pw_stream
/// \{
class pw_stream extends ffi.Opaque {}

/// \enum pw_stream_state The state of a stream
abstract class pw_stream_state {
  /// < the stream is in error
  static const int PW_STREAM_STATE_ERROR = -1;

  /// < unconnected
  static const int PW_STREAM_STATE_UNCONNECTED = 0;

  /// < connection is in progress
  static const int PW_STREAM_STATE_CONNECTING = 1;

  /// < paused
  static const int PW_STREAM_STATE_PAUSED = 2;

  /// < streaming
  static const int PW_STREAM_STATE_STREAMING = 3;
}

class pw_buffer extends ffi.Struct {
  /// < the spa buffer
  external ffi.Pointer<spa_buffer> buffer;

  /// < user data attached to the buffer
  external ffi.Pointer<ffi.Void> user_data;

  /// < This field is set by the user and the sum of
  /// all queued buffer is returned in the time info
  @ffi.Uint64()
  external int size;
}

class pw_stream_control extends ffi.Struct {
  /// < name of the control
  external ffi.Pointer<ffi.Char> name;

  /// < extra flags (unused)
  @ffi.Uint32()
  external int flags;

  /// < default value
  @ffi.Float()
  external double def;

  /// < min value
  @ffi.Float()
  external double min;

  /// < max value
  @ffi.Float()
  external double max;

  /// < array of values
  external ffi.Pointer<ffi.Float> values;

  /// < number of values in array
  @ffi.Uint32()
  external int n_values;

  /// < max values that can be set on this control
  @ffi.Uint32()
  external int max_values;
}

/// A time structure
class pw_time extends ffi.Struct {
  /// < the monotonic time in nanoseconds
  @ffi.Int64()
  external int now;

  /// < the rate of \a ticks and delay
  external spa_fraction rate;

  /// < the ticks at \a now. This is the current time that
  /// the remote end is reading/writing.
  @ffi.Uint64()
  external int ticks;

  /// < delay to device, add to ticks to get the time of the
  /// device. Positive for INPUT streams and
  /// negative for OUTPUT streams.
  @ffi.Int64()
  external int delay;

  /// < data queued in the stream, this is the sum
  /// of the size fields in the pw_buffer that are
  /// currently queued
  @ffi.Uint64()
  external int queued;
}

class spa_fraction extends ffi.Struct {
  @ffi.Uint32()
  external int num;

  @ffi.Uint32()
  external int denom;
}

/// Events for a stream. These events are always called from the mainloop
/// unless explicitly documented otherwise.
class pw_stream_events extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      destroy;

  /// when the stream state changes
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32,
              ffi.Pointer<ffi.Char>)>> state_changed;

  /// Notify information about a control.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32,
              ffi.Pointer<pw_stream_control>)>> control_info;

  /// when io changed on the stream.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32,
              ffi.Pointer<ffi.Void>, ffi.Uint32)>> io_changed;

  /// when a parameter changed
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Pointer<spa_pod>)>>
      param_changed;

  /// when a new buffer was created for this stream
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<pw_buffer>)>>
      add_buffer;

  /// when a buffer was destroyed for this stream
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<pw_buffer>)>>
      remove_buffer;

  /// when a buffer can be queued (for playback streams) or
  /// dequeued (for capture streams). This is normally called from the
  /// mainloop but can also be called directly from the realtime data
  /// thread if the user is prepared to deal with this.
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      process;

  /// The stream is drained
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      drained;

  /// A command notify, Since 0.3.39:1
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<spa_command>)>> command;

  /// a trigger_process completed. Since version 0.3.40:2
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      trigger_done;
}

/// \enum pw_stream_flags Extra flags that can be used in \ref pw_stream_connect()
abstract class pw_stream_flags {
  /// < no flags
  static const int PW_STREAM_FLAG_NONE = 0;

  /// < try to automatically connect
  /// this stream
  static const int PW_STREAM_FLAG_AUTOCONNECT = 1;

  /// < start the stream inactive,
  /// pw_stream_set_active() needs to be
  /// called explicitly
  static const int PW_STREAM_FLAG_INACTIVE = 2;

  /// < mmap the buffers except DmaBuf
  static const int PW_STREAM_FLAG_MAP_BUFFERS = 4;

  /// < be a driver
  static const int PW_STREAM_FLAG_DRIVER = 8;

  /// < call process from the realtime
  /// thread. You MUST use RT safe functions
  /// in the process callback.
  static const int PW_STREAM_FLAG_RT_PROCESS = 16;

  /// < don't convert format
  static const int PW_STREAM_FLAG_NO_CONVERT = 32;

  /// < require exclusive access to the
  /// device
  static const int PW_STREAM_FLAG_EXCLUSIVE = 64;

  /// < don't try to reconnect this stream
  /// when the sink/source is removed
  static const int PW_STREAM_FLAG_DONT_RECONNECT = 128;

  /// < the application will allocate buffer
  /// memory. In the add_buffer event, the
  /// data of the buffer should be set
  static const int PW_STREAM_FLAG_ALLOC_BUFFERS = 256;

  /// < the output stream will not be scheduled
  /// automatically but _trigger_process()
  /// needs to be called. This can be used
  /// when the output of the stream depends
  /// on input from other streams.
  static const int PW_STREAM_FLAG_TRIGGER = 512;
}

/// \addtogroup pw_filter
/// \{
class pw_filter extends ffi.Opaque {}

/// \enum pw_filter_state The state of a filter
abstract class pw_filter_state {
  /// < the stream is in error
  static const int PW_FILTER_STATE_ERROR = -1;

  /// < unconnected
  static const int PW_FILTER_STATE_UNCONNECTED = 0;

  /// < connection is in progress
  static const int PW_FILTER_STATE_CONNECTING = 1;

  /// < filter is connected and paused
  static const int PW_FILTER_STATE_PAUSED = 2;

  /// < filter is streaming
  static const int PW_FILTER_STATE_STREAMING = 3;
}

/// Events for a filter. These events are always called from the mainloop
/// unless explicitly documented otherwise.
class pw_filter_events extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      destroy;

  /// when the filter state changes
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32,
              ffi.Pointer<ffi.Char>)>> state_changed;

  /// when io changed on a port of the filter (when port_data is NULL).
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Uint32, ffi.Pointer<ffi.Void>, ffi.Uint32)>> io_changed;

  /// when a parameter changed on a port of the filter (when port_data is NULL).
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Uint32, ffi.Pointer<spa_pod>)>> param_changed;

  /// when a new buffer was created for a port
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<pw_buffer>)>> add_buffer;

  /// when a buffer was destroyed for a port
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<pw_buffer>)>> remove_buffer;

  /// do processing. This is normally called from the
  /// mainloop but can also be called directly from the realtime data
  /// thread if the user is prepared to deal with this.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<spa_io_position>)>> process;

  /// The filter is drained
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      drained;

  /// A command notify, Since 0.3.39:1
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<spa_command>)>> command;
}

/// The position information adds extra meaning to the raw clock times.
///
/// It is set on all nodes and the clock id will contain the clock of the
/// driving node in the graph.
///
/// The position information contains 1 or more segments that convert the
/// raw clock times to a stream time. They are sorted based on their
/// start times, and thus the order in which they will activate in
/// the future. This makes it possible to look ahead in the scheduled
/// segments and anticipate the changes in the timeline.
class spa_io_position extends ffi.Struct {
  /// < clock position of driver, always valid and
  /// read only
  external spa_io_clock clock;

  /// < size of the video in the current cycle
  external spa_io_video_size video;

  /// < an offset to subtract from the clock position
  /// to get a running time. This is the time that
  /// the state has been in the RUNNING state and the
  /// time that should be used to compare the segment
  /// start values against.
  @ffi.Int64()
  external int offset;

  /// < one of enum spa_io_position_state
  @ffi.Uint32()
  external int state;

  /// < number of segments
  @ffi.Uint32()
  external int n_segments;

  @ffi.Array.multi([8])
  external ffi.Array<spa_io_segment> segments;
}

/// Absolute time reporting.
///
/// Nodes that can report clocking information will receive this io block.
/// The application sets the id. This is usually set as part of the
/// position information but can also be set separately.
///
/// The clock counts the elapsed time according to the clock provider
/// since the provider was last started.
class spa_io_clock extends ffi.Struct {
  /// < clock flags
  @ffi.Uint32()
  external int flags;

  /// < unique clock id, set by application
  @ffi.Uint32()
  external int id;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> name;

  /// < time in nanoseconds against monotonic clock
  @ffi.Uint64()
  external int nsec;

  /// < rate for position/duration/delay
  external spa_fraction rate;

  /// < current position
  @ffi.Uint64()
  external int position;

  /// < duration of current cycle
  @ffi.Uint64()
  external int duration;

  /// < delay between position and hardware,
  /// positive for capture, negative for playback
  @ffi.Int64()
  external int delay;

  /// < rate difference between clock and monotonic time
  @ffi.Double()
  external double rate_diff;

  /// < estimated next wakeup time in nanoseconds
  @ffi.Uint64()
  external int next_nsec;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint32> padding;
}

/// the size of the video in this cycle
class spa_io_video_size extends ffi.Struct {
  /// < optional flags
  @ffi.Uint32()
  external int flags;

  /// < video stride in bytes
  @ffi.Uint32()
  external int stride;

  /// < the video size
  external spa_rectangle size;

  /// < the minimum framerate, the cycle duration is
  /// always smaller to ensure there is only one
  /// video frame per cycle.
  external spa_fraction framerate;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint32> padding;
}

class spa_rectangle extends ffi.Struct {
  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;
}

/// A segment converts a running time to a segment (stream) position.
///
/// The segment position is valid when the current running time is between
/// start and start + duration. The position is then
/// calculated as:
///
/// (running time - start) * rate + position;
///
/// Support for looping is done by specifying the LOOPING flags with a
/// non-zero duration. When the running time reaches start + duration,
/// duration is added to start and the loop repeats.
///
/// Care has to be taken when the running time + clock.duration extends
/// past the start + duration from the segment; the user should correctly
/// wrap around and partially repeat the loop in the current cycle.
///
/// Extra information can be placed in the segment by setting the valid flags
/// and filling up the corresponding structures.
class spa_io_segment extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  /// < extra flags
  @ffi.Uint32()
  external int flags;

  /// < value of running time when this
  /// info is active. Can be in the future for
  /// pending changes. It does not have to be in
  /// exact multiples of the clock duration.
  @ffi.Uint64()
  external int start;

  /// < duration when this info becomes invalid expressed
  /// in running time. If the duration is 0, this
  /// segment extends to the next segment. If the
  /// segment becomes invalid and the looping flag is
  /// set, the segment repeats.
  @ffi.Uint64()
  external int duration;

  /// < overall rate of the segment, can be negative for
  /// backwards time reporting.
  @ffi.Double()
  external double rate;

  /// < The position when the running time == start.
  /// can be invalid when the owner of the extra segment
  /// information has not yet made the mapping.
  @ffi.Uint64()
  external int position;

  external spa_io_segment_bar bar;

  external spa_io_segment_video video;
}

/// bar and beat segment
class spa_io_segment_bar extends ffi.Struct {
  /// < extra flags
  @ffi.Uint32()
  external int flags;

  /// < offset in segment of this beat
  @ffi.Uint32()
  external int offset;

  /// < time signature numerator
  @ffi.Float()
  external double signature_num;

  /// < time signature denominator
  @ffi.Float()
  external double signature_denom;

  /// < beats per minute
  @ffi.Double()
  external double bpm;

  /// < current beat in segment
  @ffi.Double()
  external double beat;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint32> padding;
}

/// video frame segment
class spa_io_segment_video extends ffi.Struct {
  /// < flags
  @ffi.Uint32()
  external int flags;

  /// < offset in segment
  @ffi.Uint32()
  external int offset;

  external spa_fraction framerate;

  @ffi.Uint32()
  external int hours;

  @ffi.Uint32()
  external int minutes;

  @ffi.Uint32()
  external int seconds;

  @ffi.Uint32()
  external int frames;

  /// < 0 for progressive, 1 and 2 for interlaced
  @ffi.Uint32()
  external int field_count;

  @ffi.Array.multi([11])
  external ffi.Array<ffi.Uint32> padding;
}

/// \enum pw_filter_flags Extra flags that can be used in \ref pw_filter_connect()
abstract class pw_filter_flags {
  /// < no flags
  static const int PW_FILTER_FLAG_NONE = 0;

  /// < start the filter inactive,
  /// pw_filter_set_active() needs to be
  /// called explicitly
  static const int PW_FILTER_FLAG_INACTIVE = 1;

  /// < be a driver
  static const int PW_FILTER_FLAG_DRIVER = 2;

  /// < call process from the realtime
  /// thread
  static const int PW_FILTER_FLAG_RT_PROCESS = 4;

  /// < don't call the default latency algorithm
  /// but emit the param_changed event for the
  /// ports when Latency params are received.
  static const int PW_FILTER_FLAG_CUSTOM_LATENCY = 8;
}

abstract class pw_filter_port_flags {
  /// < no flags
  static const int PW_FILTER_PORT_FLAG_NONE = 0;

  /// < mmap the buffers except DmaBuf
  static const int PW_FILTER_PORT_FLAG_MAP_BUFFERS = 1;

  /// < the application will allocate buffer
  /// memory. In the add_buffer event, the
  /// data of the buffer should be set
  static const int PW_FILTER_PORT_FLAG_ALLOC_BUFFERS = 2;
}

/// \addtogroup pw_thread_loop
/// \{
class pw_thread_loop extends ffi.Opaque {}

/// Thread loop events
class pw_thread_loop_events extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  /// the loop is destroyed
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      destroy;
}

class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __time_t = ffi.Long;
typedef __syscall_slong_t = ffi.Long;

/// \addtogroup pw_data_loop
/// \{
class pw_data_loop extends ffi.Opaque {}

/// Loop events, use \ref pw_data_loop_add_listener to add a listener
class pw_data_loop_events extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  /// The loop is destroyed
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      destroy;
}

class spa_thread extends ffi.Opaque {}

typedef spa_invoke_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<spa_loop>, ffi.Bool, ffi.Uint32,
            ffi.Pointer<ffi.Void>, ffi.Size, ffi.Pointer<ffi.Void>)>>;

class spa_type_info extends ffi.Struct {
  @ffi.Uint32()
  external int type;

  @ffi.Uint32()
  external int parent;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<spa_type_info> values;
}

const int PW_TYPE_FIRST = 33554432;

const String PW_TYPE_INTERFACE_Core = 'PipeWire:Interface:Core';

const String PW_TYPE_INTERFACE_Registry = 'PipeWire:Interface:Registry';

const int PW_VERSION_CORE = 3;

const int PW_VERSION_REGISTRY = 3;

const String PW_DEFAULT_REMOTE = 'pipewire-0';

const int PW_ID_CORE = 0;

const int PW_ID_ANY = 4294967295;

const int PW_CORE_CHANGE_MASK_PROPS = 1;

const int PW_CORE_CHANGE_MASK_ALL = 1;

const int PW_PROPERTIES_FLAG_NL = 1;

const int PW_CORE_EVENT_INFO = 0;

const int PW_CORE_EVENT_DONE = 1;

const int PW_CORE_EVENT_PING = 2;

const int PW_CORE_EVENT_ERROR = 3;

const int PW_CORE_EVENT_REMOVE_ID = 4;

const int PW_CORE_EVENT_BOUND_ID = 5;

const int PW_CORE_EVENT_ADD_MEM = 6;

const int PW_CORE_EVENT_REMOVE_MEM = 7;

const int PW_CORE_EVENT_NUM = 8;

const int PW_VERSION_CORE_EVENTS = 0;

const int PW_CORE_METHOD_ADD_LISTENER = 0;

const int PW_CORE_METHOD_HELLO = 1;

const int PW_CORE_METHOD_SYNC = 2;

const int PW_CORE_METHOD_PONG = 3;

const int PW_CORE_METHOD_ERROR = 4;

const int PW_CORE_METHOD_GET_REGISTRY = 5;

const int PW_CORE_METHOD_CREATE_OBJECT = 6;

const int PW_CORE_METHOD_DESTROY = 7;

const int PW_CORE_METHOD_NUM = 8;

const int PW_VERSION_CORE_METHODS = 0;

const int PW_REGISTRY_EVENT_GLOBAL = 0;

const int PW_REGISTRY_EVENT_GLOBAL_REMOVE = 1;

const int PW_REGISTRY_EVENT_NUM = 2;

const int PW_VERSION_REGISTRY_EVENTS = 0;

const int PW_REGISTRY_METHOD_ADD_LISTENER = 0;

const int PW_REGISTRY_METHOD_BIND = 1;

const int PW_REGISTRY_METHOD_DESTROY = 2;

const int PW_REGISTRY_METHOD_NUM = 3;

const int PW_VERSION_REGISTRY_METHODS = 0;

const int PW_VERSION_CONTEXT_EVENTS = 0;

const String PW_TYPE_INFO_Protocol = 'PipeWire:Protocol';

const String PW_TYPE_INFO_PROTOCOL_BASE = 'PipeWire:Protocol:';

const int PW_PROTOCOL_MARSHAL_FLAG_IMPL = 1;

const int PW_VERSION_PROTOCOL_IMPLEMENTATION = 0;

const int PW_VERSION_PROTOCOL_EVENTS = 0;

const int PW_VERSION_PROXY_EVENTS = 0;

const int PW_PERM_R = 256;

const int PW_PERM_W = 128;

const int PW_PERM_X = 64;

const int PW_PERM_M = 8;

const int PW_PERM_RWX = 448;

const int PW_PERM_RWXM = 456;

const int PW_PERM_ALL = 456;

const int PW_PERM_INVALID = 4294967295;

const String PW_PERMISSION_FORMAT = '%c%c%c%c';

const String PW_TYPE_INTERFACE_Client = 'PipeWire:Interface:Client';

const int PW_VERSION_CLIENT = 3;

const int PW_ID_CLIENT = 1;

const int PW_CLIENT_CHANGE_MASK_PROPS = 1;

const int PW_CLIENT_CHANGE_MASK_ALL = 1;

const int PW_CLIENT_EVENT_INFO = 0;

const int PW_CLIENT_EVENT_PERMISSIONS = 1;

const int PW_CLIENT_EVENT_NUM = 2;

const int PW_VERSION_CLIENT_EVENTS = 0;

const int PW_CLIENT_METHOD_ADD_LISTENER = 0;

const int PW_CLIENT_METHOD_ERROR = 1;

const int PW_CLIENT_METHOD_UPDATE_PROPERTIES = 2;

const int PW_CLIENT_METHOD_GET_PERMISSIONS = 3;

const int PW_CLIENT_METHOD_UPDATE_PERMISSIONS = 4;

const int PW_CLIENT_METHOD_NUM = 5;

const int PW_VERSION_CLIENT_METHODS = 0;

const String PW_TYPE_INTERFACE_Device = 'PipeWire:Interface:Device';

const int PW_VERSION_DEVICE = 3;

const int PW_DEVICE_CHANGE_MASK_PROPS = 1;

const int PW_DEVICE_CHANGE_MASK_PARAMS = 2;

const int PW_DEVICE_CHANGE_MASK_ALL = 3;

const int PW_DEVICE_EVENT_INFO = 0;

const int PW_DEVICE_EVENT_PARAM = 1;

const int PW_DEVICE_EVENT_NUM = 2;

const int PW_VERSION_DEVICE_EVENTS = 0;

const int PW_DEVICE_METHOD_ADD_LISTENER = 0;

const int PW_DEVICE_METHOD_SUBSCRIBE_PARAMS = 1;

const int PW_DEVICE_METHOD_ENUM_PARAMS = 2;

const int PW_DEVICE_METHOD_SET_PARAM = 3;

const int PW_DEVICE_METHOD_NUM = 4;

const int PW_VERSION_DEVICE_METHODS = 0;

const int PW_VERSION_MEMPOOL_EVENTS = 0;

const int PW_BUFFERS_FLAG_NONE = 0;

const int PW_BUFFERS_FLAG_NO_MEM = 1;

const int PW_BUFFERS_FLAG_SHARED = 2;

const int PW_BUFFERS_FLAG_DYNAMIC = 4;

const int PW_BUFFERS_FLAG_SHARED_MEM = 8;

const String PW_TYPE_INTERFACE_Factory = 'PipeWire:Interface:Factory';

const int PW_VERSION_FACTORY = 3;

const int PW_FACTORY_CHANGE_MASK_PROPS = 1;

const int PW_FACTORY_CHANGE_MASK_ALL = 1;

const int PW_FACTORY_EVENT_INFO = 0;

const int PW_FACTORY_EVENT_NUM = 1;

const int PW_VERSION_FACTORY_EVENTS = 0;

const int PW_FACTORY_METHOD_ADD_LISTENER = 0;

const int PW_FACTORY_METHOD_NUM = 1;

const int PW_VERSION_FACTORY_METHODS = 0;

const String PW_KEY_PROTOCOL = 'pipewire.protocol';

const String PW_KEY_ACCESS = 'pipewire.access';

const String PW_KEY_CLIENT_ACCESS = 'pipewire.client.access';

const String PW_KEY_SEC_PID = 'pipewire.sec.pid';

const String PW_KEY_SEC_UID = 'pipewire.sec.uid';

const String PW_KEY_SEC_GID = 'pipewire.sec.gid';

const String PW_KEY_SEC_LABEL = 'pipewire.sec.label';

const String PW_KEY_LIBRARY_NAME_SYSTEM = 'library.name.system';

const String PW_KEY_LIBRARY_NAME_LOOP = 'library.name.loop';

const String PW_KEY_LIBRARY_NAME_DBUS = 'library.name.dbus';

const String PW_KEY_OBJECT_PATH = 'object.path';

const String PW_KEY_OBJECT_ID = 'object.id';

const String PW_KEY_OBJECT_SERIAL = 'object.serial';

const String PW_KEY_OBJECT_LINGER = 'object.linger';

const String PW_KEY_OBJECT_REGISTER = 'object.register';

const String PW_KEY_CONFIG_PREFIX = 'config.prefix';

const String PW_KEY_CONFIG_NAME = 'config.name';

const String PW_KEY_CONTEXT_PROFILE_MODULES = 'context.profile.modules';

const String PW_KEY_USER_NAME = 'context.user-name';

const String PW_KEY_HOST_NAME = 'context.host-name';

const String PW_KEY_CORE_NAME = 'core.name';

const String PW_KEY_CORE_VERSION = 'core.version';

const String PW_KEY_CORE_DAEMON = 'core.daemon';

const String PW_KEY_CORE_ID = 'core.id';

const String PW_KEY_CORE_MONITORS = 'core.monitors';

const String PW_KEY_CPU_MAX_ALIGN = 'cpu.max-align';

const String PW_KEY_CPU_CORES = 'cpu.cores';

const String PW_KEY_PRIORITY_SESSION = 'priority.session';

const String PW_KEY_PRIORITY_DRIVER = 'priority.driver';

const String PW_KEY_REMOTE_NAME = 'remote.name';

const String PW_KEY_REMOTE_INTENTION = 'remote.intention';

const String PW_KEY_APP_NAME = 'application.name';

const String PW_KEY_APP_ID = 'application.id';

const String PW_KEY_APP_VERSION = 'application.version';

const String PW_KEY_APP_ICON = 'application.icon';

const String PW_KEY_APP_ICON_NAME = 'application.icon-name';

const String PW_KEY_APP_LANGUAGE = 'application.language';

const String PW_KEY_APP_PROCESS_ID = 'application.process.id';

const String PW_KEY_APP_PROCESS_BINARY = 'application.process.binary';

const String PW_KEY_APP_PROCESS_USER = 'application.process.user';

const String PW_KEY_APP_PROCESS_HOST = 'application.process.host';

const String PW_KEY_APP_PROCESS_MACHINE_ID = 'application.process.machine-id';

const String PW_KEY_APP_PROCESS_SESSION_ID = 'application.process.session-id';

const String PW_KEY_WINDOW_X11_DISPLAY = 'window.x11.display';

const String PW_KEY_CLIENT_ID = 'client.id';

const String PW_KEY_CLIENT_NAME = 'client.name';

const String PW_KEY_CLIENT_API = 'client.api';

const String PW_KEY_NODE_ID = 'node.id';

const String PW_KEY_NODE_NAME = 'node.name';

const String PW_KEY_NODE_NICK = 'node.nick';

const String PW_KEY_NODE_DESCRIPTION = 'node.description';

const String PW_KEY_NODE_PLUGGED = 'node.plugged';

const String PW_KEY_NODE_SESSION = 'node.session';

const String PW_KEY_NODE_GROUP = 'node.group';

const String PW_KEY_NODE_EXCLUSIVE = 'node.exclusive';

const String PW_KEY_NODE_AUTOCONNECT = 'node.autoconnect';

const String PW_KEY_NODE_TARGET = 'node.target';

const String PW_KEY_NODE_LATENCY = 'node.latency';

const String PW_KEY_NODE_MAX_LATENCY = 'node.max-latency';

const String PW_KEY_NODE_LOCK_QUANTUM = 'node.lock-quantum';

const String PW_KEY_NODE_FORCE_QUANTUM = 'node.force-quantum';

const String PW_KEY_NODE_RATE = 'node.rate';

const String PW_KEY_NODE_LOCK_RATE = 'node.lock-rate';

const String PW_KEY_NODE_FORCE_RATE = 'node.force-rate';

const String PW_KEY_NODE_DONT_RECONNECT = 'node.dont-reconnect';

const String PW_KEY_NODE_ALWAYS_PROCESS = 'node.always-process';

const String PW_KEY_NODE_WANT_DRIVER = 'node.want-driver';

const String PW_KEY_NODE_PAUSE_ON_IDLE = 'node.pause-on-idle';

const String PW_KEY_NODE_SUSPEND_ON_IDLE = 'node.suspend-on-idle';

const String PW_KEY_NODE_CACHE_PARAMS = 'node.cache-params';

const String PW_KEY_NODE_TRANSPORT_SYNC = 'node.transport.sync';

const String PW_KEY_NODE_DRIVER = 'node.driver';

const String PW_KEY_NODE_STREAM = 'node.stream';

const String PW_KEY_NODE_VIRTUAL = 'node.virtual';

const String PW_KEY_NODE_PASSIVE = 'node.passive';

const String PW_KEY_NODE_LINK_GROUP = 'node.link-group';

const String PW_KEY_NODE_NETWORK = 'node.network';

const String PW_KEY_NODE_TRIGGER = 'node.trigger';

const String PW_KEY_PORT_ID = 'port.id';

const String PW_KEY_PORT_NAME = 'port.name';

const String PW_KEY_PORT_DIRECTION = 'port.direction';

const String PW_KEY_PORT_ALIAS = 'port.alias';

const String PW_KEY_PORT_PHYSICAL = 'port.physical';

const String PW_KEY_PORT_TERMINAL = 'port.terminal';

const String PW_KEY_PORT_CONTROL = 'port.control';

const String PW_KEY_PORT_MONITOR = 'port.monitor';

const String PW_KEY_PORT_CACHE_PARAMS = 'port.cache-params';

const String PW_KEY_PORT_EXTRA = 'port.extra';

const String PW_KEY_LINK_ID = 'link.id';

const String PW_KEY_LINK_INPUT_NODE = 'link.input.node';

const String PW_KEY_LINK_INPUT_PORT = 'link.input.port';

const String PW_KEY_LINK_OUTPUT_NODE = 'link.output.node';

const String PW_KEY_LINK_OUTPUT_PORT = 'link.output.port';

const String PW_KEY_LINK_PASSIVE = 'link.passive';

const String PW_KEY_LINK_FEEDBACK = 'link.feedback';

const String PW_KEY_DEVICE_ID = 'device.id';

const String PW_KEY_DEVICE_NAME = 'device.name';

const String PW_KEY_DEVICE_PLUGGED = 'device.plugged';

const String PW_KEY_DEVICE_NICK = 'device.nick';

const String PW_KEY_DEVICE_STRING = 'device.string';

const String PW_KEY_DEVICE_API = 'device.api';

const String PW_KEY_DEVICE_DESCRIPTION = 'device.description';

const String PW_KEY_DEVICE_BUS_PATH = 'device.bus-path';

const String PW_KEY_DEVICE_SERIAL = 'device.serial';

const String PW_KEY_DEVICE_VENDOR_ID = 'device.vendor.id';

const String PW_KEY_DEVICE_VENDOR_NAME = 'device.vendor.name';

const String PW_KEY_DEVICE_PRODUCT_ID = 'device.product.id';

const String PW_KEY_DEVICE_PRODUCT_NAME = 'device.product.name';

const String PW_KEY_DEVICE_CLASS = 'device.class';

const String PW_KEY_DEVICE_FORM_FACTOR = 'device.form-factor';

const String PW_KEY_DEVICE_BUS = 'device.bus';

const String PW_KEY_DEVICE_SUBSYSTEM = 'device.subsystem';

const String PW_KEY_DEVICE_ICON = 'device.icon';

const String PW_KEY_DEVICE_ICON_NAME = 'device.icon-name';

const String PW_KEY_DEVICE_INTENDED_ROLES = 'device.intended-roles';

const String PW_KEY_DEVICE_CACHE_PARAMS = 'device.cache-params';

const String PW_KEY_MODULE_ID = 'module.id';

const String PW_KEY_MODULE_NAME = 'module.name';

const String PW_KEY_MODULE_AUTHOR = 'module.author';

const String PW_KEY_MODULE_DESCRIPTION = 'module.description';

const String PW_KEY_MODULE_USAGE = 'module.usage';

const String PW_KEY_MODULE_VERSION = 'module.version';

const String PW_KEY_FACTORY_ID = 'factory.id';

const String PW_KEY_FACTORY_NAME = 'factory.name';

const String PW_KEY_FACTORY_USAGE = 'factory.usage';

const String PW_KEY_FACTORY_TYPE_NAME = 'factory.type.name';

const String PW_KEY_FACTORY_TYPE_VERSION = 'factory.type.version';

const String PW_KEY_STREAM_IS_LIVE = 'stream.is-live';

const String PW_KEY_STREAM_LATENCY_MIN = 'stream.latency.min';

const String PW_KEY_STREAM_LATENCY_MAX = 'stream.latency.max';

const String PW_KEY_STREAM_MONITOR = 'stream.monitor';

const String PW_KEY_STREAM_DONT_REMIX = 'stream.dont-remix';

const String PW_KEY_STREAM_CAPTURE_SINK = 'stream.capture.sink';

const String PW_KEY_MEDIA_TYPE = 'media.type';

const String PW_KEY_MEDIA_CATEGORY = 'media.category';

const String PW_KEY_MEDIA_ROLE = 'media.role';

const String PW_KEY_MEDIA_CLASS = 'media.class';

const String PW_KEY_MEDIA_NAME = 'media.name';

const String PW_KEY_MEDIA_TITLE = 'media.title';

const String PW_KEY_MEDIA_ARTIST = 'media.artist';

const String PW_KEY_MEDIA_COPYRIGHT = 'media.copyright';

const String PW_KEY_MEDIA_SOFTWARE = 'media.software';

const String PW_KEY_MEDIA_LANGUAGE = 'media.language';

const String PW_KEY_MEDIA_FILENAME = 'media.filename';

const String PW_KEY_MEDIA_ICON = 'media.icon';

const String PW_KEY_MEDIA_ICON_NAME = 'media.icon-name';

const String PW_KEY_MEDIA_COMMENT = 'media.comment';

const String PW_KEY_MEDIA_DATE = 'media.date';

const String PW_KEY_MEDIA_FORMAT = 'media.format';

const String PW_KEY_FORMAT_DSP = 'format.dsp';

const String PW_KEY_AUDIO_CHANNEL = 'audio.channel';

const String PW_KEY_AUDIO_RATE = 'audio.rate';

const String PW_KEY_AUDIO_CHANNELS = 'audio.channels';

const String PW_KEY_AUDIO_FORMAT = 'audio.format';

const String PW_KEY_AUDIO_ALLOWED_RATES = 'audio.allowed-rates';

const String PW_KEY_VIDEO_RATE = 'video.framerate';

const String PW_KEY_VIDEO_FORMAT = 'video.format';

const String PW_KEY_VIDEO_SIZE = 'video.size';

const String PW_KEY_TARGET_OBJECT = 'target.object';

const String PW_TYPE_INTERFACE_Link = 'PipeWire:Interface:Link';

const int PW_VERSION_LINK = 3;

const int PW_LINK_CHANGE_MASK_STATE = 1;

const int PW_LINK_CHANGE_MASK_FORMAT = 2;

const int PW_LINK_CHANGE_MASK_PROPS = 4;

const int PW_LINK_CHANGE_MASK_ALL = 7;

const int PW_LINK_EVENT_INFO = 0;

const int PW_LINK_EVENT_NUM = 1;

const int PW_VERSION_LINK_EVENTS = 0;

const int PW_LINK_METHOD_ADD_LISTENER = 0;

const int PW_LINK_METHOD_NUM = 1;

const int PW_VERSION_LINK_METHODS = 0;

const int PW_VERSION_MAIN_LOOP_EVENTS = 0;

const String PW_TYPE_INTERFACE_Module = 'PipeWire:Interface:Module';

const int PW_VERSION_MODULE = 3;

const int PW_MODULE_CHANGE_MASK_PROPS = 1;

const int PW_MODULE_CHANGE_MASK_ALL = 1;

const int PW_MODULE_EVENT_INFO = 0;

const int PW_MODULE_EVENT_NUM = 1;

const int PW_VERSION_MODULE_EVENTS = 0;

const int PW_MODULE_METHOD_ADD_LISTENER = 0;

const int PW_MODULE_METHOD_NUM = 1;

const int PW_VERSION_MODULE_METHODS = 0;

const String PW_TYPE_INTERFACE_Node = 'PipeWire:Interface:Node';

const int PW_VERSION_NODE = 3;

const int PW_NODE_CHANGE_MASK_INPUT_PORTS = 1;

const int PW_NODE_CHANGE_MASK_OUTPUT_PORTS = 2;

const int PW_NODE_CHANGE_MASK_STATE = 4;

const int PW_NODE_CHANGE_MASK_PROPS = 8;

const int PW_NODE_CHANGE_MASK_PARAMS = 16;

const int PW_NODE_CHANGE_MASK_ALL = 31;

const int PW_NODE_EVENT_INFO = 0;

const int PW_NODE_EVENT_PARAM = 1;

const int PW_NODE_EVENT_NUM = 2;

const int PW_VERSION_NODE_EVENTS = 0;

const int PW_NODE_METHOD_ADD_LISTENER = 0;

const int PW_NODE_METHOD_SUBSCRIBE_PARAMS = 1;

const int PW_NODE_METHOD_ENUM_PARAMS = 2;

const int PW_NODE_METHOD_SET_PARAM = 3;

const int PW_NODE_METHOD_SEND_COMMAND = 4;

const int PW_NODE_METHOD_NUM = 5;

const int PW_VERSION_NODE_METHODS = 0;

const String PW_TYPE_INTERFACE_Port = 'PipeWire:Interface:Port';

const int PW_VERSION_PORT = 3;

const int PW_DIRECTION_INPUT = 0;

const int PW_DIRECTION_OUTPUT = 1;

const int PW_PORT_CHANGE_MASK_PROPS = 1;

const int PW_PORT_CHANGE_MASK_PARAMS = 2;

const int PW_PORT_CHANGE_MASK_ALL = 3;

const int PW_PORT_EVENT_INFO = 0;

const int PW_PORT_EVENT_PARAM = 1;

const int PW_PORT_EVENT_NUM = 2;

const int PW_VERSION_PORT_EVENTS = 0;

const int PW_PORT_METHOD_ADD_LISTENER = 0;

const int PW_PORT_METHOD_SUBSCRIBE_PARAMS = 1;

const int PW_PORT_METHOD_ENUM_PARAMS = 2;

const int PW_PORT_METHOD_NUM = 3;

const int PW_VERSION_PORT_METHODS = 0;

const int PW_VERSION_STREAM_EVENTS = 2;

const int PW_VERSION_FILTER_EVENTS = 1;

const int PW_VERSION_THREAD_LOOP_EVENTS = 0;

const int PW_VERSION_DATA_LOOP_EVENTS = 0;

const String PW_TYPE_INFO_BASE = 'PipeWire:';

const String PW_TYPE_INFO_Object = 'PipeWire:Object';

const String PW_TYPE_INFO_OBJECT_BASE = 'PipeWire:Object:';

const String PW_TYPE_INFO_Interface = 'PipeWire:Interface';

const String PW_TYPE_INFO_INTERFACE_BASE = 'PipeWire:Interface:';

const String PW_API_VERSION = '0.3';

const int PW_MAJOR = 0;

const int PW_MINOR = 3;

const int PW_MICRO = 48;
